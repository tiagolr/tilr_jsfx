desc: FLTR-1
author: tilr
version: 1.1.6
provides:
  fltr1/fltr.Saike_Yutani_Filters.jsfx-inc
  fltr1/fltr.Saike_Yutani_oversampling.jsfx-inc
  fltr1/fltr.Saike_Yutani_upsamplers.jsfx-inc
  fltr1/fltr.array.jsfx-inc
  fltr1/fltr.curvelib.jsfx-inc
  fltr1/fltr.mouselib.jsfx-inc
changelog:
  Fix slider range
about:
  # FLTR-1

  Envelope based filter modulator.

  Features:

  * 28 filter types
  * Filter drive
  * MSEGs for cutoff and resonance
  * 12 patterns triggered by midi notes
  * Paint mode - erase, line, saw up, saw down ..
  * Point type - hold, curve, s-curve, stairs ..
  * Tempo sync or lfo rate (Hz)
  * Envelope smoothing
  * Pre and post waveform display

slider1:pattern_cut=1<1,12,1>Pattern Cut
slider2:pattern_res=1<1,12,1>Pattern Res
slider3:sync=5<0,17,1{Off,1/16,1/8,1/4,1/2,1/1,2/1,4/1,1/16t,1/8t,1/4t,1/2t,1/1t,1/16.,1/8.,1/4.,1/2.,1/1.}>Tempo sync
slider4:ratehz=1<0.01,140,.01:log>Rate (Hz)
slider5:phase=0<0,1,.01>Phase
slider7:_min_cut=0<0,100,1>Min Cut
slider8:_max_cut=100<0,100,1>Max Cut
slider9:_min_res=0<0,100,1>Min Res
slider10:_max_res=100<0,100,1>Max Res
slider11:lfosmooth=0<0,100>Smooth

slider20:filter_type=0<0,28,1{Linear,MS-20,Linear x2,Moog,Ladder,303,MS-20 asym,DblRes,DualPeak,TriplePeak,svf nl 2p,svf nl 4p,svf nl 2p inc,svf nl 4p inc,rectified resonance,Steiner,SteinerA,Muck,Pill2p,Pill4p,Pill2p Aggro,Pill4p Aggro,Pill2p Stacc,Pill4p Stacc,Ladder3,Ladder6,HLadder,SVF2,SVF4}>Filter type
slider21:filter_mode=0<0,3,1{Low Pass,Band Pass,High Pass,Band Reject}>Filter Mode
slider22:drive=0<0,48,1>Filter Drive (dB)
slider23:boost=0<-6,48,1>Post Boost (dB)
slider24:cutoff=.6<0,1,.0001>-Cutoff
slider25:resonance=0.707<0.707,1,.0001>-Resonance
slider26:morph=0<0,1,.0001>-Morph

slider30:value_cut=0.5<0,1,0.01>-Value Cutoff
slider31:value_res=0.5<0,1,0.01>-Value Resonance
slider32:_oversampling=0<0,7,1{Off,2x,3x,4x,5x,6x,7x,8x}>-Oversampling
slider33:retrigger=0<0,1,1>-Retrigger

import fltr.Saike_Yutani_Filters.jsfx-inc
import fltr.Saike_Yutani_oversampling.jsfx-inc
import fltr.Saike_Yutani_upsamplers.jsfx-inc
import fltr.curvelib.jsfx-inc
import fltr.mouselib.jsfx-inc

options:gfx_hz=60 no_meter gmem=mseg1

@serialize

store_pattern(pattern_cut - 1, patterns_cut, curve_cut);
store_pattern(pattern_res - 1, patterns_res, curve_res);
file_var(0, dual_smooth);
file_var(0, paint_mode);
file_var(0, gridsegs);
file_var(0, draw_wave);
file_var(0, always_playing);
file_var(0, link_edge_points);
file_var(0, show_retrigger_slider);
file_var(0, trigger_channel_cut);
file_var(0, trigger_channel_res);
file_var(0, link_patterns);
file_var(0, show_filter_drive);
file_var(0, mode);
file_mem(0, patterns_cut, npatterns * (1 + 4 * 1000));
file_mem(0, patterns_res, npatterns * (1 + 4 * 1000));

file_avail(0) >= 0 ? (
  lpattern_cut = -1; // force load current pattern
  lpattern_res = -1; // force load current pattern
  on_slider(); // update sliders after loading vars
);

@init
ext_noinit = 1;
freemem = 0;
lfilter_mode = filter_mode;
lmorph = morph;
log10d20_conversion  = .11512925464970228420089957273422;

/* Oversampling memory */
freemem = (sinc_hist1 = freemem) + 10000;
freemem = (sinc_hist2 = freemem) + 10000;
freemem = (sinc_flt = freemem) + 10000;
freemem = (sinc_flt2 = freemem) + 10000;
freemem = (sinc_flt3 = freemem) + 10000;
freemem = (sinc_flt4 = freemem) + 10000;
freemem = (sinc_tmp = freemem) + 10000;

freemem = (l_buffer = freemem) + 2001;
freemem = (r_buffer = freemem) + 2001;

freemem = (l_pdc_buffer = freemem) + 2001;
freemem = (r_pdc_buffer = freemem) + 2001;

// *****************************

snap = 0;
selected_point = -1;
selected_midpoint = -1;
paint_mode = 1; // 0 = Erase, 1 = Line
point_mode = 1; // 0 = hold, 1 line
view = 0; // 0 cut, 1 res
npatterns = 12;
lpattern_cut = -1;
lpattern_res = -1;
trigger_channel_cut = 8;
trigger_channel_res = 9;
draw_wave = 1;
show_about = 0;
always_playing = 0;
show_retrigger_slider = 0;
show_filter_drive = 0;
link_edge_points = 1;
link_patterns = 0;
mode = 0; // 0 Sync, 2 - MIDI
min_q = freemem; // min Q value for filters
freemem += 30;
patterns_cut = freemem; // buffer to store patterns 12 * (1 + 4 * 1000)
patterns_res = freemem+100000; // buffer to store patterns 12 * (1 + 4 * 1000)
pre_samples = freemem+200000; // buffer with pre volume samples - winx size
post_samples = freemem+300000; // buffer with post volume samples - winx size
freemem += 500000;

// Imprecise minimum Q values for flat filter response
min_q[0] = 0.4; min_q[1] = 0.3; min_q[2] = 0.4; min_q[3] = 0.1; min_q[4] = 0.02; min_q[5] = 0.2;
min_q[6] = 0.5; min_q[7] = 0.2; min_q[8] = 0.4; min_q[9] = 0.4; min_q[10] = 0.1;
min_q[11] = 0.1; min_q[12] = 0.2; min_q[13] = 0.2; min_q[14] = 0.3; min_q[15] = 0.2;
min_q[16] = 0.2; min_q[17] = 0.4; min_q[18] = 0.4; min_q[19] = 0.4; min_q[20] = 0.4;
min_q[21] = 0.3; min_q[22] = 0.3; min_q[23] = 0.3; min_q[24] = 0.1; min_q[25] = 0.1;
min_q[26] = 0.15; min_q[27] = 0.25; min_q[28] = 0.4;

function store_pattern(pattern, patterns, curve*)
global()
local(buf)
(
  buf = patterns + pattern * (1 + 4 * 1000);
  buf[0] = curve.points.size;
  memcpy(buf + 1, curve.points.buf, 4 * 1000);
);

function load_pattern(pattern, patterns, curve*)
global()
local(buf)
(
  buf = patterns + pattern * (1 + 4 * 1000);
  curve.points.size = buf[0];
  memcpy(curve.points.buf, buf + 1, 4 * 1000);
  curve.build_segments();
);

function copy_curve(curve*)
global(gmem)
local(i)
(
  gmem[0] = curve.points.size;
  loop(i=0; 1000 * 4,
    gmem[i+1] = curve.points.buf[i];
    i += 1;
  );
);

function copy_both()
local(i)
(
  gmem[0] = curve_cut.points.size;
  loop(i=0; 1000 * 4,
    gmem[i+1] = curve_cut.points.buf[i];
    i += 1;
  );

  gmem[4000] = curve_res.points.size;
  loop(i=4000; 1000 * 4,
    gmem[i+1] = curve_res.points.buf[i-4000];
    i += 1;
  );
);

function paste_curve(curve*)
global(gmem)
local(i)
(
  gmem[0] ? (
    curve.points.size = gmem[0];
    loop(i=0; 1000 * 4,
      curve.points.buf[i] = gmem[i+1];
      i += 1;
    );
  );
  curve.build_segments();
);

function paste_both()
local(i)
(
  gmem[0] && gmem[4000] ? (
    curve_cut.points.size = gmem[0];
    curve_res.points.size = gmem[4000];
    loop(i=0; 1000 * 4,
      curve_cut.points.buf[i] = gmem[i+1];
      curve_res.points.buf[i] = gmem[i+1+4000];
      i += 1;
    );
  );
  curve_res.build_segments();
  curve_cut.build_segments();
);

freemem = curve_cut.curve_init(freemem, 1000);
curve_cut.insert_point(0,1,0,1);
curve_cut.insert_point(0.5,0,0,1);
curve_cut.insert_point(1,1,0,1);
curve_cut.build_segments();

curve_res.curve_init(freemem, 1000);
curve_res.insert_point(0,.5,0,1);
curve_res.insert_point(1,.5,0,1);
curve_res.build_segments();

loop(i=0; npatterns, // init all memory patterns with same curve
  store_pattern(i, patterns_cut, curve_cut);
  store_pattern(i, patterns_res, curve_res);
  i += 1;
);

function rc_set(rc)
  instance(a) (
    a = 1 / (rc * srate + 1);
);
function rc_lp(sample)
  instance(lp, a) (
    lp += a * (sample - lp);
);
function smooth()
  instance (lp, smooth) (
    lp = smooth;
    smooth = this.rc_lp(this);
);
function rc_set2(rca, rcb)
instance (a, b)
(
  a = 1 / (rca * srate + 1);
  b = 1 / (rcb * srate + 1);
);
function rc_lp2(sample, ab)
instance(lp, a, b)
(
  lp += ab
    ? a * (sample - lp)
    : b * (sample - lp);
);
function smooth2(sample, ab)
(
  lp = smooth;
  smooth = this.rc_lp2(sample, ab);
);

function get_cut_y(x)
local(val)
(
  val =  1 - curve_cut.get_y_at(x);
  min_cut + (max_cut - min_cut) * val;
);

function get_res_y(x)
local(val)
(
  val =  1 - curve_res.get_y_at(x);
  min_res + (max_res - min_res) * val;
);

function on_slider() (
  oversampling = _oversampling + 1;
  sampling_ratio = 44100 / srate;
  sampling_factor = oversampling / sampling_ratio;
  isampling_factor = 1 / sampling_factor;
  israte = 1.0 / srate;
  israte_radian = 2.0*$pi*israte;
  current_safety_moog = (1.0 - log(safety_limit_moog * oversampling) / log(20/22050));

  // change morph based on filter_mode
  lfilter_mode != filter_mode ? (
    morph = filter_mode / 4;
    lmorph = morph;
    lfilter_mode = filter_mode;
  );

  // change filter_mode based on morph
  lmorph != morph ? (
    filter_mode = floor(morph * 4);
    lfilter_mode = filter_mode;
    lmorph = morph;
  );

  value_cut.rc_set2(lfosmooth * 0.0025, lfosmooth * 0.0025);
  value_res.rc_set2(lfosmooth * 0.0025, lfosmooth * 0.0025);
  slider_show(ratehz, !sync);
  slider_show(_min_cut, !view);
  slider_show(_max_cut, !view);
  slider_show(_min_res, view);
  slider_show(_max_res, view);
  slider_show(retrigger, show_retrigger_slider);
  slider_show(drive, show_filter_drive);
  slider_show(boost, show_filter_drive);
  _min_cut > _max_cut ? _min_cut = _max_cut;
  min_cut = _min_cut / 100;
  max_cut = _max_cut / 100;
  _min_res > _max_res ? _min_res = _max_res;
  min_res = _min_res / 100;
  max_res = _max_res / 100;

  pattern_cut = min(max(1, pattern_cut),12)|0;
  lpattern_cut != pattern_cut ? (
    lpattern_cut >= 0 ? store_pattern(lpattern_cut - 1, patterns_cut, curve_cut);
    load_pattern(pattern_cut - 1, patterns_cut, curve_cut);
  );
  lpattern_cut = pattern_cut;

  link_patterns ? pattern_res = pattern_cut;

  pattern_res = min(max(1, pattern_res),12)|0;
  lpattern_res != pattern_res ? (
    lpattern_res >= 0 ? store_pattern(lpattern_res - 1, patterns_res, curve_res);
    load_pattern(pattern_res - 1, patterns_res, curve_res);
  );
  lpattern_res = pattern_res;

  sync == 0 ? sync_qn = 0
  : sync == 1 ? sync_qn = 1/4 // 1/16
  : sync == 2 ? sync_qn = 1/2 // 1/8
  : sync == 3 ? sync_qn = 1/1 // 1/4
  : sync == 4 ? sync_qn = 1*2 // 1/2
  : sync == 5 ? sync_qn = 1*4 // 1bar
  : sync == 6 ? sync_qn = 1*8 // 2bar
  : sync == 7 ? sync_qn = 1*16 // 4bar
  : sync == 8 ? sync_qn = 1/6 // 1/16t
  : sync == 9 ? sync_qn = 1/3 // 1/8t
  : sync == 10 ? sync_qn = 2/3 // 1/4t
  : sync == 11 ? sync_qn = 4/3 // 1/2t
  : sync == 12 ? sync_qn = 8/3 // 1/1t
  : sync == 13 ? sync_qn = 1/4*1.5 // 1/16.
  : sync == 14 ? sync_qn = 1/2*1.5 // 1/8.
  : sync == 15 ? sync_qn = 1/1*1.5 // 1/4.
  : sync == 16 ? sync_qn = 2/1*1.5 // 1/2.
  : sync == 17 ? sync_qn = 4/1*1.5; // 1/1.
);

function retrigger_lfo() (
  sync ? (
    beat_pos = -phase * sync_qn;
  ) : (
    beat_pos = -phase;
  );
);

drive.rc_set(0.0033);
drive.smooth = drive;
boost.rc_set(0.0033);
boost.smooth = boost;

@slider

on_slider();

@block

beats_per_spl = tempo / (60 * srate);
mode == 0 && sync && play_state & 1 ? (
  beat_pos = beat_position;
);
// reset play position for Hz sync mode
mode == 0 && !sync && (play_state & 1) && (!lplay_state & 1) ? (
  beat_pos = 0;
);

while (midirecv(offset, msg1, note, vel)) (
  event = msg1 & 0xF0;
  channel = msg1 & 0x0F;

  event == 0x90 && vel &&
  (channel == trigger_channel_cut - 1 || trigger_channel_cut == 17) ?
  (
    pattern_cut = note % 12 + 1;
    on_slider();
  );

  event == 0x90 && vel &&
  (channel == trigger_channel_res - 1 || trigger_channel_res == 17) ?
  (
    pattern_res = note % 12 + 1;
    on_slider();
  );

  mode == 2 && event == 0x90 && vel &&
  channel != trigger_channel_cut - 1 &&
  channel != trigger_channel_res - 1 ?
  (
    midi_trigger = 1;
    xpos = phase;
  );

  midisend(offset, msg1, note, vel);
);

always_playing && !(play_state & 1) && retrigger && !lretrigger ? (
  retrigger_lfo();
);
lretrigger = retrigger;

@sample

value_cut = -1; // mark value as unprocessed

function process_pos(xpos) (
  nextv = get_cut_y(xpos);
  value_cut = value_cut.smooth2(nextv, nextv > value_cut);

  nextv = get_res_y(xpos);
  value_res = value_res.smooth2(nextv, nextv > value_res);

  cutoff = value_cut;
  resonance = min_q[filter_type] + value_res * (1 - min_q[filter_type]); // linear map resonance

  winpos = floor(xpos * winw);
  lwinpos != winpos ? (
    pre_samples[winpos] = 0;
    post_samples[winpos] = 0;
  );
  lwinpos = winpos;
  pre_samples[winpos] < abs((spl0 + spl1) / 2)
    ? pre_samples[winpos] = (spl0 + spl1) / 2;
);

// when playback starts reset env smooth
sync && (!lplay_state & 1) && (play_state & 1)  ? (
  value_cut.smooth = get_cut_y(beat_pos / sync_qn + phase);
  value_res.smooth = get_res_y(beat_pos / sync_qn + phase);
  memset(pre_samples,0,winw);
  memset(post_samples,0,winw);
);

lplay_state = play_state;

mode == 0 && (play_state & 1 || always_playing) ? (
  sync ? (
    beat_pos += beats_per_spl;
    xpos = beat_pos / sync_qn + phase;
  ) : (
    beat_pos += 1 / srate * ratehz;
    xpos = beat_pos + phase;
  );

  xpos -= floor(xpos);
  process_pos(xpos);
);

mode == 2 && (always_playing || midi_trigger) ? (
  always_playing && midi_trigger ? (
    xpos = phase;
    midi_trigger = 0;
  );
  xpos += sync
    ? beats_per_spl / sync_qn
    : 1 / srate * ratehz;
  !always_playing && xpos >= 1 ? (
    midi_trigger = 0;
    xpos = 1;
  ) : (
    xpos -= floor(xpos);
  );
  process_pos(xpos);
);

// keep processing value and filter in midi mode
mode == 2 && !always_playing && !midi_trigger ? (
  process_pos(xpos);
);

check_safety();

// ******************* Filter processing

processing = max(0.9 * processing, spl0 || spl1);

processing && value_cut !== -1 ? (
  drive.smooth();
  boost.smooth();

  cut = min(cutoff, limited_cutoff);
  filter.init_filter(filter_type, cut, cut, morph, morph, resonance);

  current_drive = clamp(drive.smooth, -32, 48);
  current_boost = clamp(boost.smooth, -6, 48);
  preamp      = exp(log10d20_conversion*current_drive);
  inv_preamp  = exp(-log10d20_conversion*current_drive);
  final_boost = exp(log10d20_conversion*current_boost);

  oversampling > 1 ? (
    upsampleL.updateUpHist(oversampling, spl0);
    upsampleR.updateUpHist(oversampling, spl1);

    f = 0;
    loop(oversampling,
      f += 1;
      ssl = oversampling*upsampleL.upSample(oversampling) * preamp;
      ssr = oversampling*upsampleR.upSample(oversampling) * preamp;

      filter.processSample(filter_type);
      ssl *= inv_preamp;
      ssr *= inv_preamp;

      downL.updateDownHist(oversampling, ssl);
      downR.updateDownHist(oversampling, ssr);

      ( f == 1 ) ? (
        spl0 = downL.downSample(oversampling);
        spl1 = downR.downSample(oversampling);
      );
    );
  ) : (
    ssl = spl0 * preamp;
    ssr = spl1 * preamp;

    filter.processSample(filter_type);
    ssl *= inv_preamp;
    ssr *= inv_preamp;

    spl0 = ssl;
    spl1 = ssr;
  );

  spl0 *= final_boost;
  spl1 *= final_boost;

  post_samples[winpos] < abs((spl0 + spl1) / 2)
    ? post_samples[winpos] = (spl0 + spl1) / 2;
);

// We need to make sure that both input and output are silent before shutting down the filter.
processing = max(processing, spl0 || spl1);

@gfx 600 380

!gridsegs ? gridsegs = 8;
color_active = 0x00aaFF;
color_bg = 0x141618;
color_cut = 0xFFFFFF;
color_res = 0x00aaFF;
hover_radius = 8;
hover = 0;
winx = 10;
winy = 50;
winw = gfx_w - 20;
winh = gfx_h - winy - 10;
gridx = winw / gridsegs;
gridy = winh / gridsegs;

function is_snapping() (
  (snap && !mouse.control) || (!snap && mouse.control);
);

function set_color(color) (
  gfx_r = (color & 0xFF0000) / 0xFF0000;
  gfx_g = (color & 0x00FF00) / 0x00FF00;
  gfx_b = (color & 0x0000FF) / 0x0000FF;
);

function round(x) (
  floor(x + 0.5 * sign(x));
);

function draw_midpoint(seg, i, curve*)
local (x, y, xx, yy)
(
  x = (seg[1] + seg[0]) * 0.5;
  y = seg[6] > 1
    ? (seg[2] + seg[3]) / 2
    : curve.get_y_at(x);
  xx = x * winw + winx;
  yy = y * winh + winy;
  set_color(view ? color_res : color_cut);
  gfx_circle(xx, yy, 3);

  selected_midpoint == -1 && selected_point == -1 && !hover
  && mouse_in_rect(xx - hover_radius, yy - hover_radius, hover_radius * 2, hover_radius * 2) ?
  (
    hover = 1;
    gfx_a = 0.5;
    gfx_circle(xx, yy, hover_radius, 1);
    mouse.left_click ? (
      selected_midpoint = i;
    );
  );

  selected_midpoint == i ? (
    gfx_a = 1;
    gfx_circle(xx, yy, 3, 1);
  );
);

function on_midpoint_move(dy, curve*)
local(point, tension, next, rising)
(
  point = curve.points.array_get(selected_midpoint);
  next = curve.points.array_get(selected_midpoint + 1);
  rising = point[1] < next[1];
  rising ? dy *= -1;
  tension = point[2];
  tension += dy / 100;
  tension > 1 ? tension = 1;
  tension < -1 ? tension = -1;
  point[2] = tension;
  curve.build_segments();
);

function get_cutoff_hz(cut)
local(cutoff_hz)
(
  cutoff_hz = 0.5 * sampling_ratio * srate * exp((cut) * log(20/22050));
  cutoff_hz < 1000
    ? sprintf(#, "%d Hz", cutoff_hz)
    : sprintf(#, "%.2f kHz", cutoff_hz / 1000);
);

function draw_point(point, i, color, is_secondary)
local (xx, yy)
(
  set_color(color);
  gfx_a = is_secondary ? 0.5 : 1;
  xx = point[0] * winw + winx;
  yy = point[1] * winh + winy;
  gfx_circle(xx, yy, is_secondary ? 3 : 4, 1);

  selected_point == -1 && selected_midpoint == -1 && !hover
    && mouse_in_rect(xx - hover_radius, yy - hover_radius, hover_radius * 2, hover_radius * 2) ?
    (
    hover = 1;
    gfx_a = is_secondary ? 0.25 : 0.5;
    gfx_circle(xx, yy, hover_radius, 1);

    mouse.left_click ? (
      is_secondary ? (
        view = !view;
        on_slider();
      ) : (
        selected_point = i;
      );
    );
  );

  selected_point == i && !is_secondary ? (
    gfx_set(1,0,0,0.5);
    gfx_circle(xx, yy, 5, 1);
    !view ? (
      set_color(color_cut);
      xx > gfx_w / 1.3 ? (
        gfx_x = xx - 100; gfx_y = yy - 3;
        gfx_drawstr(get_cutoff_hz(point[1]), 2, xx-10, yy+20);
      ) : (
        gfx_x = xx+15; gfx_y = yy - 3;
        gfx_drawstr(get_cutoff_hz(point[1]));
      );
    );
  );
);

function on_point_move(curve*)
local(point, prev, next, xx, yy)
(
  point = curve.points.array_get(selected_point);
  is_snapping() ? (
    xx = round((mouse.x - winx) / gridx) * gridx + winx;
    yy = round((mouse.y - winy) / gridy) * gridy + winy;
  ) : (
    xx = mouse.x;
    yy = mouse.y;
  );
  xx = (xx - winx) / winw;
  yy = (yy - winy) / winh;

  selected_point == 0 ? (
    point[1] = yy;
    point[1] < 0 ? point[1] = 0;
    point[1] > 1 ? point[1] = 1;
    link_edge_points ? (
      next = curve.points.array_get(curve.points.size - 1);
      next[1] = point[1];
    );
  ) :
  selected_point == curve.points.size - 1 ? (
    point[1] = yy;
    point[1] < 0 ? point[1] = 0;
    point[1] > 1 ? point[1] = 1;
    link_edge_points ? (
      prev = curve.points.array_get(0);
      prev[1] = point[1];
    );
  ) : (
    point[0] = xx;
    point[1] = yy;
    point[0] < 0 ? point[0] = 0;
    point[0] > 1 ? point[0] = 1;
    point[1] < 0 ? point[1] = 0;
    point[1] > 1 ? point[1] = 1;
    prev = curve.points.array_get(selected_point - 1);
    next = curve.points.array_get(selected_point + 1);
    point[0] < prev[0] ? point[0] = prev[0];
    point[0] > next[0] ? point[0] = next[0];
  );
  curve.build_segments();
);

function on_double_click (curve*)
local (found, seg, px, py, i, point, x, y, coolinear)
(
  found = 0;
  // if xy in point and point not edge delete point
  loop(i=0; curve.points.size,
    point = curve.points.array_get(i);
    px = winx + winw * point[0];
    py = winy + winh * point[1];
    !found && point_in_rect(mouse.x, mouse.y, px-hover_radius, py-hover_radius, hover_radius * 2, hover_radius * 2) ? (
      i && point != curve.points.array_last() ? (
        curve.remove_point(i);
      );
      found = 1;
    );
    i += 1;
  );
  // if xy in midpoint reset tension
  loop(i=0; curve.segments.size,
    seg = curve.segments.array_get(i);
    x = (seg[1] + seg[0]) * 0.5;
    y = curve.get_y_at(x);
    px = x * winw + winx;
    py = y * winh + winy;
    !found && !is_collinear(seg) && point_in_rect(mouse.x, mouse.y, px-hover_radius, py-hover_radius, hover_radius * 2, hover_radius * 2) ? (
      point = curve.points.array_get(i);
      point[2] = 0; // reset tension
      found = 1;
    );
    i += 1;
  );

  !found ? (
    px = mouse.x;
    py = mouse.y;
    is_snapping() ? (
      px = round((mouse.x - winx) / gridx) * gridx + winx;
      py = round((mouse.y - winy) / gridy) * gridy + winy;
    );
    x = (px - winx) / winw;
    y = (py - winy) / winh;
    x >= 0 && x <= 1 && y >= 0 && y <= 1 ? ( // point in env window
      x == 1 ? x -= 0.000001; // special case avoid inserting point after last point
      selected_point = curve.insert_point(x, y, 0, point_mode);
    );
  );
  curve.build_segments();
);

/*
  Paint function activated on RMB
*/
function paint (curve*)
local (seg, mousex, mousey)
(
  mousex = (mouse.x - winx) / winw;
  mousey = (mouse.y - winy) / winh;
  is_snapping() ? (
    mousey = round(mousey * gridsegs) / gridsegs;
  );
  seg = floor(mousex * gridsegs);

  paint_mode == 0 || mouse.alt ? ( // erase mode
    curve.remove_points_in_range(seg / gridsegs, (seg + 1) / gridsegs);
  ) :
  paint_mode == 1 ? ( // line mode
    curve.remove_points_in_range(seg / gridsegs + 0.00001, (seg + 1) / gridsegs - 0.00001);
    curve.insert_point(seg / gridsegs + 0.00001, mousey, 0, 1);
    curve.insert_point((seg+1) / gridsegs - 0.00001, mousey, 0, 1);
  ) :
  paint_mode == 2 ? ( // saw up
    curve.remove_points_in_range(seg / gridsegs + 0.00001, (seg + 1) / gridsegs - 0.00001);
    curve.insert_point(seg / gridsegs + 0.00001, 1, 0, 1);
    curve.insert_point((seg+1) / gridsegs - 0.00001, mousey, 0, 1);
  ) :
  paint_mode == 3 ? ( // saw down
    curve.remove_points_in_range(seg / gridsegs + 0.00001, (seg + 1) / gridsegs - 0.00001);
    curve.insert_point(seg / gridsegs + 0.00001, mousey, 0, 1);
    curve.insert_point((seg+1) / gridsegs - 0.00001, 1, 0, 1);
  ) :
  paint_mode == 4 ? ( // triangle
    curve.remove_points_in_range(seg / gridsegs + 0.00001, (seg + 1) / gridsegs - 0.00001);
    curve.insert_point(seg / gridsegs + 0.00001, 1, 0, 1);
    curve.insert_point(seg / gridsegs + (((seg+1) / gridsegs - seg / gridsegs) / 2), mousey, 0, 1);
    curve.insert_point((seg+1) / gridsegs - 0.00001, 1, 0, 1);
  );
  curve.build_segments();
);

function draw_grid ()
local(i)
(
  gfx_set(1, 1, 1);
  loop(i = 0; gridsegs + 1,
    gfx_a = gridsegs % 4 == 0 && i && i % 4 == 0 && i < gridsegs ? .15 : 0.075;
    gfx_line(winx, winy + gridy * i, winx + winw, winy + gridy * i, 0);
    gfx_line(winx + gridx * i, winy, winx + gridx * i, winy + winh, 0);
    i += 1;
  );
);

function draw_wave(samples)
local(i, ypos)
(
  gfx_x = winx;
  gfx_y = winh - min(abs(samples[0]),1) * winh + winy;
  loop(i = 0; winw,
    ypos = min(abs(samples[i]),1);
    gfx_a = ypos ? 0.1 : 0;
    gfx_triangle(gfx_x, gfx_y, gfx_x, winh + winy, i+winx, winh+winy, i+winx, winh - ypos * winh + winy);
    gfx_a = 0;
    gfx_lineto(i + winx, winh - ypos * winh + winy);
    i += 1;
  );
);

function draw_button (x, y, w, label, toggled) (
  gfx_a = 1;
  set_color(color_active);
  gfx_rect(x, y - 2, w, 10 + 2, toggled);
  gfx_x = x; gfx_y = y;
  set_color(toggled ? color_bg : color_active);
  gfx_drawstr(label, 1, x+w, y+10);
);

function draw_button_color(x, y, w, label, toggled, color) (
  gfx_a = 1;
  set_color(color);
  gfx_rect(x, y - 2, w, 10 + 2, toggled);
  gfx_x = x; gfx_y = y;
  set_color(toggled ? color_bg : color);
  gfx_drawstr(label, 1, x+w, y+10);
);

mouse.update_mouse_state();
gfx_clear = color_bg;

draw_wave && (always_playing || play_state & 1) ? (
  gfx_set(.5,.5,.5);
  draw_wave(pre_samples);
  set_color(color_active);
  draw_wave(post_samples);
);

draw_grid();

function draw_seek ()
(
  gfx_set(1,1,0.5,0.5);
  gfx_line(xpos * winw + winx, winy, xpos * winw + winx, winy + winh);
  gfx_set(1,1,.5,1);
  gfx_circle(xpos * winw + winx, (1-(view ? value_res : value_cut)) * winh + winy, 5);
);

// draw seek
(mode == 0 && play_state & 1) || always_playing || (mode == 2 && midi_trigger) ? (
  draw_seek();
);

// draw midpoints a second time so they take precedence on click
loop(i = 0; view ? curve_res.segments.size : curve_cut.segments.size,
  seg = view
    ? curve_res.segments.array_get(i)
    : curve_cut.segments.array_get(i);
  !is_collinear(seg) ? (
    view
      ? draw_midpoint(seg, i, curve_res)
      : draw_midpoint(seg, i, curve_cut);
  );
  i += 1;
);

// draw points a second time so they take precedence on click
loop(i =0; view ? curve_res.points.size : curve_cut.points.size,
  point = view
    ? curve_res.points.array_get(i)
    : curve_cut.points.array_get(i);
  draw_point(point, i, view ? color_res : color_cut, 0);
  i += 1;
);

// draw secondary curve points
loop(i =0; !view ? curve_res.points.size : curve_cut.points.size,
  point = !view
    ? curve_res.points.array_get(i)
    : curve_cut.points.array_get(i);
  draw_point(point, i, !view ? color_res : color_cut, 1);
  i += 1;
);

gfx_a = 1;
view ? (
  set_color(color_cut);
  curve_cut.draw_segments(winx, winy, winw, winh, 0);
  set_color(color_res);
  curve_res.draw_segments(winx, winy, winw, winh, 1);
) : (
  set_color(color_res);
  curve_res.draw_segments(winx, winy, winw, winh, 0);
  set_color(color_cut);
  curve_cut.draw_segments(winx, winy, winw, winh, 1);
);

// draw points a second time so they are shown in front
loop(i =0; view ? curve_res.points.size : curve_cut.points.size,
  point = view
    ? curve_res.points.array_get(i)
    : curve_cut.points.array_get(i);
  draw_point(point, i, view ? color_res : color_cut, 0);
  i += 1;
);

// draw midpoints a second time so they show
loop(i = 0; view ? curve_res.segments.size : curve_cut.segments.size,
  seg = view
    ? curve_res.segments.array_get(i)
    : curve_cut.segments.array_get(i);
  !is_collinear(seg) ? (
    view
      ? draw_midpoint(seg, i, curve_res)
      : draw_midpoint(seg, i, curve_cut);
  );
  i += 1;
);


// draw left buttons
drawx = winx;
drawy = 10;
draw_button_color(drawx, drawy, 100, "Cutoff", !view, color_cut);
mouse.left_click && mouse_in_rect(drawx, drawy, 100, 10) ? (
  view = 0;
  on_slider();
);
drawx += 110;
draw_button_color(drawx, drawy, 100, "Resonance", view, color_res);
mouse.left_click && mouse_in_rect(drawx, drawy, 100, 10) ? (
  view = 1;
  on_slider();
);

drawx = winx;
drawy = 30;
gfx_x = drawx; gfx_y = drawy;
gfx_set(1,1,1);
gfx_drawstr("Paint:");
drawx += 55;
label = paint_mode == 0 ? "Erase" : paint_mode == 1 ? "Line"
  : paint_mode == 2 ? "Saw up" : paint_mode == 3 ? "Saw dn"
  : paint_mode == 4 ? "Tri";
draw_button(drawx, drawy, 60, label, 0);
mouse.left_click && mouse_in_rect(drawx, drawy-2, 60, 10+2) ? (
  gfx_x = drawx; gfx_y = drawy+10;
  choice = gfx_showmenu("Erase (Alt + RClick)|Line|Saw up|Saw down|Triangle");
  choice ? paint_mode = choice - 1;
);

drawx += 70;
gfx_x = drawx; gfx_y = drawy;
gfx_set(1,1,1);
gfx_drawstr("Pt:");
drawx += 30;
label = point_mode == 0 ? "Hold" : point_mode == 1 ? "Curve"
  : point_mode == 2 ? "SCurve" : point_mode == 3 ? "Pulse"
  : point_mode == 4 ? "Wave" : point_mode == 5 ? "Tri"
  : point_mode == 6 ? "Stairs" : point_mode == 7 ? "SStairs";
draw_button(drawx, drawy, 60, label, 0);
mouse.left_click && mouse_in_rect(drawx, drawy-2, 60, 10+2) ? (
  gfx_x = drawx; gfx_y = drawy+10;
  choice = gfx_showmenu("Hold|Curve|S-Curve|Pulse|Wave|Triangle|Stairs|Smooth Stairs");
  choice > 0 ? point_mode = choice - 1;
);

drawx += 70;
gfx_line(drawx, drawy-2, drawx, drawy+8);
drawx += 5;
mouse.left_click && mouse_in_rect(drawx, drawy-4, 20, 17) ? (
  always_playing = !always_playing;
);
always_playing ? (
  gfx_rect(drawx+4, drawy-1, 11, 9);
) : (
  gfx_triangle(drawx+5, drawy-2, drawx+5, drawy+10-2, drawx+5+10, drawy-2 +5);
);
mode == 0 && (always_playing && !(play_state & 1)) ? (
  drawx += 25;
  draw_button(drawx, drawy, 20, "R", 0);
  mouse.left_click && mouse_in_rect(drawx, drawy-2, 20, 10+2) ? (
    retrigger_lfo();
  );
);

mouse.left_click ? show_about = 0;

// draw right buttons
drawx = gfx_w - 40;
drawy = 10;
gfx_x = drawx; gfx_y = drawy;
set_color(color_active);
gfx_drawstr("...", 1, gfx_x+30, drawy+12);
mouse.left_click && mouse_in_rect(drawx, drawy-2, 30, 10+2) ? (
  gfx_x = drawx;
  gfx_y = drawy+10;
  menu = #;
  strcpy(menu, ">Oversampling|");
  strcat(menu, _oversampling == 0 ? "!Off|": "Off|");
  strcat(menu, _oversampling == 1 ? "!2x|": "2x|");
  strcat(menu, _oversampling == 2 ? "!3x|": "3x|");
  strcat(menu, _oversampling == 3 ? "!4x|": "4x|");
  strcat(menu, _oversampling == 4  ? "!5x|": "5x|");
  strcat(menu, _oversampling == 5  ? "!6x|": "6x|");
  strcat(menu, _oversampling == 6  ? "!7x|": "7x|");
  strcat(menu, _oversampling == 7  ? "<!8x|": "<8x|");
  strcat(menu, ">Options|");
  strcat(menu, ">Trigger Chn Cut");
  loop(i=0; 18,
    i == 0 ? strcat(menu, trigger_channel_cut == 0 ? "|!Off" : "|Off")
    : i == 17 ? strcat(menu, trigger_channel_cut == 17 ? "|<!Omni" : "|<Omni")
    : strcat(menu, trigger_channel_cut == i
      ? sprintf(#, "|!%i", i)
      : sprintf(#, "|%i", i));
    i += 1;
  );
  strcat(menu, "|>Trigger Chn Res");
  loop(i=0; 18,
    i == 0 ? strcat(menu, trigger_channel_res == 0 ? "|!Off" : "|Off")
    : i == 17 ? strcat(menu, trigger_channel_res == 17 ? "|<!Omni" : "|<Omni")
    : strcat(menu, trigger_channel_res == i
      ? sprintf(#, "|!%i", i)
      : sprintf(#, "|%i", i));
    i += 1;
  );
  strcat(menu, link_edge_points ? "|!Link edge points" : "|Link edge points");
  strcat(menu, show_filter_drive ? "|!Show filter drive" : "|Show filter drive");
  strcat(menu, show_retrigger_slider ? "|<!Show retrigger slider" : "|<Show retrigger slider");
  strcat(menu, link_patterns ? "|!Link patterns" : "|Link patterns");
  strcat(menu, draw_wave ? "|!Draw wave" : "|Draw wave");
  strcat(menu, "||Invert|Reverse|Clear");
  strcat(menu, "|>Copy|Curve|<Both");
  strcat(menu, "|>Paste|Curve|<Both");
  strcat(menu, "||>Load");
  strcat(menu, "|Sine|Triangle|<Random");
  strcat(menu, "|About");
  choice = gfx_showmenu(menu);

  choice > 0 && choice <= 8 ? (
    _oversampling = choice - 1;
    on_slider();
  );

  choice > 8 && choice <= 18+8 ? (
    trigger_channel_cut = choice - 1 - 8;
  );

  choice > 18+8 && choice < 18+8+18 ? (
    trigger_channel_res = choice - 1 - 8 - 18;
  );

  choice == 1 + 18+8+18 ? (
    link_edge_points = !link_edge_points;
  );

  choice == 2 + 18+8+18 ? (
    show_filter_drive = !show_filter_drive;
    on_slider();
  );

  choice == 3 + 18+8+18 ? (
    show_retrigger_slider = !show_retrigger_slider;
    on_slider();
  );
  choice == 4 + 18+8+18 ? (
    link_patterns = !link_patterns;
    on_slider();
  );
  choice == 5+18+8+18 ? (
    draw_wave = !draw_wave;
  );
  choice == 6+18+8+18 ? (
    view ? (
      curve_res.invert();
      curve_res.build_segments();
    ) : (
      curve_cut.invert();
      curve_cut.build_segments();
    );
  );
  choice == 7+18+8+18 ? (
    view ? (
      curve_res.reverse();
      curve_res.build_segments();
    ) : (
      curve_cut.reverse();
      curve_cut.build_segments();
    );
  );
  choice == 8+18+8+18 ? (
    view ? (
      curve_res.clear();
      curve_res.build_segments();
    ) : (
      curve_cut.clear();
      curve_cut.build_segments();
    );
  );
  choice == 9+18+8+18 ? (
    view
      ? copy_curve(curve_res)
      : copy_curve(curve_cut);
  );
  choice == 10+18+8+18 ? (
    copy_both();
  );
  choice == 11+18+8+18 ? (
    view
      ? paste_curve(curve_res)
      : paste_curve(curve_cut);
  );
  choice == 12+18+8+18 ? (
    paste_both();
  );
  choice == 13+18+8+18 ? (
    view ? (
      curve_res.load_sine();
      curve_res.build_segments();
    ) : (
      curve_cut.load_sine();
      curve_cut.build_segments();
    );
  );
  choice == 14+18+8+18 ? (
    view ? (
      curve_res.load_triangle();
      curve_res.build_segments();
    ) : (
      curve_cut.load_triangle();
      curve_cut.build_segments();
    );
  );
  choice == 15+18+8+18 ? (
    view ? (
      curve_res.load_random(gridsegs);
      curve_res.build_segments();
    ) : (
      curve_cut.load_random(gridsegs);
      curve_cut.build_segments();
    );
  );
  choice == 16+18+8+18 ? (
    show_about = 1;
  );
);

drawx -= 60;
draw_button(drawx, drawy, 50, "Snap", is_snapping());
mouse.left_click && mouse_in_rect(drawx, drawy-2, 50, 10+2) ? (
  snap = !snap;
);

drawx -= 20;
set_color(color_active);
gfx_triangle(drawx, drawy-2, drawx+10, drawy+5-2, drawx, drawy+10-2);
mouse.left_click && mouse_in_rect(drawx, drawy-2, 10, 10) ? (
  gridsegs += 1;
  gridsegs > 32 ? gridsegs = 2;
);

drawx -= 65;
gfx_x = drawx; gfx_y = drawy;
gfx_set(1,1,1);
gfx_drawstr(sprintf(#, "Grid %i", gridsegs), 1, drawx + 60, drawy+10);
//draw_button(drawx, 10, 60, sprintf(#, "Grid %i", gridsegs), 0);
mouse.left_click && mouse_in_rect(drawx, drawy-2, 60, 10+2) ? (
  gfx_x = drawx; gfx_y = drawy+10;
  choice = gfx_showmenu("2|3|4|5|6|8|10|12|16|32");
  choice == 1 ? gridsegs = 2;
  choice == 2 ? gridsegs = 3;
  choice == 3 ? gridsegs = 4;
  choice == 4 ? gridsegs = 5;
  choice == 5 ? gridsegs = 6;
  choice == 6 ? gridsegs = 8;
  choice == 7 ? gridsegs = 10;
  choice == 8 ? gridsegs = 12;
  choice == 9 ? gridsegs = 16;
  choice == 10 ? gridsegs = 32;
);

drawx -= 18;
set_color(color_active);
gfx_triangle(drawx, drawy+5-2, drawx+10, drawy-2, drawx+10, drawy+10-2);
mouse.left_click && mouse_in_rect(drawx, drawy-2, 10, 10) ? (
  gridsegs -= 1;
  gridsegs < 2 ? gridsegs = 32;
);


drawx = gfx_w - 10;
drawy = 30;
drawx -= 50;
draw_button(drawx, drawy, 50, "Paste", 0);
mouse.left_click && mouse_in_rect(drawx, drawy, 50, 10) ? (
  gfx_x = drawx; gfx_y = drawy + 10;
  choice = gfx_showmenu("Curve|Both");
  choice == 1 ? view ? paste_curve(curve_res) : paste_curve(curve_cut);
  choice == 2 ? paste_both();
);
drawx -= 60;
draw_button(drawx, drawy, 50, "Copy", 0);
mouse.left_click && mouse_in_rect(drawx, drawy, 50, 10) ? (
  gfx_x = drawx; gfx_y = drawy + 10;
  choice = gfx_showmenu("Curve|Both");
  choice == 1 ? view ? copy_curve(curve_res) : copy_curve(curve_cut);
  choice == 2 ? copy_both();
);
drawx -= 60;
draw_button(drawx, drawy, 50, "MIDI", mode == 2);
mouse.left_click && mouse_in_rect(drawx, drawy-2, 50, 10+2) ? (
  mode = mode == 2 ? 0 : 2;
);

// -----------------

function get_point_at_mouse()
local(i, point, found)
(
  found = -1;
  i = 0;
  loop(i=0; view ? curve_res.points.size : curve_cut.points.size,
    point = view
      ? curve_res.points.array_get(i)
      : curve_cut.points.array_get(i);
    px = winx + winw * point[0];
    py = winy + winh * point[1];
    point_in_rect(mouse.x, mouse.y, px-hover_radius, py-hover_radius, hover_radius * 2, hover_radius * 2) ? (
      found = i;
    );
    i += 1;
  );
  found;
);

function on_right_click ()
local(point, choice, menu)
(
  point = get_point_at_mouse();
  point >= 0 ? (
    point = view
      ? curve_res.points.array_get(point)
      : curve_cut.points.array_get(point);
    gfx_x = mouse.x; gfx_y = mouse.y;
    menu = #;
    strcpy(menu, point[3] == 0 ? "!Hold" : "Hold");
    strcat(menu, point[3] == 1 ? "|!Curve":"|Curve");
    strcat(menu, point[3] == 2 ? "|!S-Curve":"|S-Curve");
    strcat(menu, point[3] == 3 ? "|!Pulse":"|Pulse");
    strcat(menu, point[3] == 4 ? "|!Wave":"|Wave");
    strcat(menu, point[3] == 5 ? "|!Triangle":"|Triangle");
    strcat(menu, point[3] == 6 ? "|!Stairs":"|Stairs");
    strcat(menu, point[3] == 7 ? "|!Smooth Stairs":"|Smooth Stairs");
    choice = gfx_showmenu(menu);
    choice > 0 ? (
      point[3] = choice - 1;
      view
        ? curve_res.build_segments()
        : curve_cut.build_segments();
    );
  );
);

mouse.right_click ? on_right_click();

mouse.right && mouse_in_rect(winx,winy,winw,winh) ? (
  get_point_at_mouse() < 0 ? (
    view
      ? paint(curve_res)
      : paint(curve_cut);
  );
);

mouse.double_click ? (
  view
    ? on_double_click(curve_res)
    : on_double_click(curve_cut);
)
: selected_point > -1 && mouse.left && (mouse.dx != 0 || mouse.dy != 0) ? (
  view
    ? on_point_move(curve_res)
    : on_point_move(curve_cut);
)
: selected_midpoint > -1 && mouse.left && mouse.dy != 0 ? (
  view
    ? on_midpoint_move(mouse.dy, curve_res)
    : on_midpoint_move(mouse.dy, curve_cut);
);

!mouse.left ? (
  selected_midpoint = -1;
  selected_point = -1;
);

mouse.wheel && mouse_in_rect(winx,winy,winw,winh) ? (
  gridsegs -= mouse.wheel;
  gridsegs < 2 ? gridsegs = 32;
  gridsegs > 32 ? gridsegs = 2;
);

function draw_about ()
local(xsize, ysize, txt, pad)
(
  gfx_setfont(1, "Arial", 16);
  xsize = 420;
  ysize = 220;
  pad = 20;
  gfx_x = 0; gfx_y = 0;
  gfx_blurto(gfx_w, gfx_h);
  gfx_x = 0; gfx_y = 0;
  gfx_blurto(gfx_w, gfx_h);
  gfx_set(0,0,0,0.8);
  gfx_rect(gfx_w/2 - xsize/2, gfx_h/2 - ysize/2, xsize, ysize);
  txt = #;
  strcpy(txt, "FLTR-1 1.1.6\nTilr 2024\n\n");
  strcat(txt, "FLTR-1 is envelope based filter modulator.\n\n");
  strcat(txt, "Toggle patterns 1-12 sending midi notes on chn 8 and 9 (default)\n");
  strcat(txt, "Left click - move points or set tension\n");
  strcat(txt, "Double click - remove or add points\n");
  strcat(txt, "Right click - Paint mode\n");
  strcat(txt, "Alt Right click - Erase mode\n");
  strcat(txt, "Control - Snapping On");
  gfx_x = gfx_w/2 - xsize/2 + pad;
  gfx_y = gfx_h/2 - ysize/2 + pad;
  gfx_set(1,1,1);
  gfx_drawstr(txt,0,gfx_w/2+xsize/2-pad,gfx_h/2+ysize/2-pad);
  gfx_setfont(0);
);

show_about ? draw_about();
