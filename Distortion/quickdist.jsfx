desc:QuickDist
author:tilr
version: 1.0.1
provides:
  qdist/qdist.squashman_upsamplers.jsfx-inc
about:
  # QuickDist

  Waveshaper distortion with 12 modes

import qdist.squashman_upsamplers.jsfx-inc

slider1:mode=0<0, 5, 1{Tanh,Hardclip,Softclip,Cubic,Ribbon,Ribbon2,Sine,Sine2,BitCrush,SinCrush,SinCrush2,Teeth}>Mode
slider2:drive=0<0,48,0.1>Drive Db
slider3:drive_amp=20<0,100,.1>Drive Amp
slider4:dynamics=0.0<0,1>Dynamics
slider5:hp=10<10,2000,1:log>Low cut
slider6:lp=20000<500,20000,1:log>High cut

slider10:oversampling=1<1,4,1>Oversampling

@init
function db2gain(db) (
  10^(db / 20);
);

// Parameter smoothing
function rc_set(rc)
  instance(a) (
    a = 1 / (rc * srate + 1);
);
function rc_lp(sample)
  instance(lp, a) (
    lp += a * (sample - lp);
);
function smooth()
  instance (lp, smooth) (
    lp = smooth;
    smooth = this.rc_lp(this);
);

// distortions
function tanh(x) (
  x = exp(2*x);
  (x - 1) / (x + 1);
);

dc = 0.05;
tanh_dc = tanh(dc);

function tube(x, gain) (
  x *= gain;
  tanh(x + dc) - tanh_dc;
);

function hardclip(x, gain) (
  x *= gain;
  x < -1 ? -1 : x > 1 ? 1: x;
);

function softclip(x, gain) (
  x *= gain;
  atan(x)
);

function fuzz(x, gain) (
  x *= gain;
  x / (1+abs(x)^10)^(1/10)
);

function cubic(x, gain) (
  x *= gain;
  tanh(x)^3;
);

function sine(x, gain) (
  sin(x*gain);
);

function sine2(x, gain) (
  x *= gain;
  (sin(x)+atan(2*x))/2;
);

function sine3(x, gain) (
  x *= gain;
  (1.85*sin(x)+atan(2*x))/(4+sin(3*x));
);

function sine4(x, gain) (
  x *= gain;
  tanh(x)+(gain-1)/gain*x/gain*sin(x);
);

function sine5(x, gain) (
  x = x * gain;
  tanh(x)+sin(x)*exp(-abs(x/gain)*5)
);

function sine6(x, gain) (
  x *= gain;
  tanh(x) + sin(x)*sin(2*x)^2 *exp(-abs(x/gain)*5)
);

function crush(x, gain)
local(depth)
(
  depth = 1000 / gain;
  floor(x * depth + 0.5) / depth / factor;
);

function ribbon(x, gain)
(
  x *= gain;
  tanh(x) * tanh(x+10) * tanh(x+20)
);
 
function ribbon2(x, gain)
(
  x *= gain;
  atan(x) * atan(x+20) * atan(x-20) / -2;
);

function ribbon3(x, gain) 
(
  atan(x) * atan(x+10) * atan(x-10) * atan(x+20) * atan(x-20) / 4 + sin(x) * exp(abs(x/gain)*-5);
);

function flathat(x, gain) 
(
  x *= gain;
  tanh(min(2^x-1, 300));
);

function fold(x, gain) (
  x *= gain;
  while(x > 1 || x < -1) (
    x > 1 ? x = 2 - x;
    x < -1 ? x = -2 - x;
  );
  x;
);

function ribbon3(x, gain)
(
  x *= gain;
  (1+1.6*x)/(1.6+x^4)-0.625;
);

function ribbon4(x, gain) (
  x *= gain;
  tanh(x - atan(5*x)*2 * min((gain/20-1/20), 1))
);

function log2(x) ( log(x) / log(2); );

function sincrush(x, gain)
local(drivefactor)
(
  x = x * gain;
  drivefactor = drive/48;
  (x+(gain^0.5)*sin(x))/(2-drivefactor)/gain/factor
);

function sincrush2(x, gain) (
  x *= gain;
  tanh(x + sin(10*x) * min((gain/10-1/10), 1))
);

function sincrush3(x, gain) (
  x *= gain;
  tanh(x + sin(10*x)^7*2 * min((gain/10-1/10), 1))
);

function sincrush4(x, gain) (
  x *= gain;
  tanh(x + abs(2*x)*sin(5/x)* min((gain/10-1/10), 1));
);

function teeth(x, gain) (
  x *= gain;
  tanh(x + sin(x*2)* x * min((gain/10-1/10), 1)*exp(-abs(x/200)))
);

function test(x, gain) (
  x *= gain;
  tanh(x)
);

gain.rc_set(0.0033);
gain.smooth = db2gain(drive);

function process(s, gain, factor) (
  mode == 0 ? tube(s, gain) * factor
  : mode == 1 ? hardclip(s, gain) * factor
  : mode == 2 ? softclip(s, gain) * factor
  : mode == 3 ? cubic(s, gain) * factor
  : mode == 4 ? ribbon(s, gain) * factor
  : mode == 5 ? ribbon2(s, gain) * factor
  : mode == 6 ? sine2(s, gain) * factor
  : mode == 7 ? sine6(s, gain) * factor
  : mode == 8 ? crush(s, gain) * factor
  : mode == 9 ? sincrush(s, gain) * factor
  : mode == 10 ? sincrush2(s, gain) * factor
  : mode == 11 ? teeth(s, gain) * factor
);

ENV_CA = 2/(srate*0.001);
ENV_CR = 2/(srate*0.050);
function envDetect(x)
instance(s ms1 ms2 denv env k)
(
  s = sqr(x);
  ms1 += ( s  > ms1 ? ENV_CA : ENV_CR) * ( s  - ms1);
  ms2 += (ms1 > ms2 ? ENV_CA : ENV_CR) * (ms1 - ms2);
  k <= 0 ? (
    denv = (sqrt(ms2) - env) * (1/8);
    k = 8;
  );
  k -= 1;
  env += denv;
);

function HP_set(f)
instance(b a)
(
  a = exp(-$pi*f/srate/oversampling);
  b = (1+a)*0.5;
);
function HP_proc(x)
instance(b a x1 y)
(
  y = a * y + b * (x - x1);
  x1 = x;
  y;
);
function LP_set(f)
instance(b1 b2 a)
(
  a = exp(-$pi*f/srate/oversampling);
  b1 = (1 - a) * (1/1.12);
  b2 = 0.12 * b1;
);
function LP_proc(x)
instance(b1 b2 a x1 y)
(
  y = a * y + b1 * x + b2 * x1;
  x1 = x;
  y;
);

@slider
gain = db2gain(drive);
L.hp.HP_set(hp);
R.hp.HP_set(hp);
L.lp.LP_set(lp);
R.lp.LP_set(lp);

@sample

gain.smooth();
f1 = drive_amp / 100;
f2 = 1/(1-f1)-1;
factor = f1 + 1/(gain.smooth + f2 * sqr(gain.smooth));

L.envDetect(spl0);
R.envDetect(spl1);

oversampling == 1 ? (
  sl = process(spl0, gain.smooth, factor) * (1+dynamics * (L.env - 1));
  sl = L.hp.HP_proc(sl);
  sl = L.lp.LP_proc(sl);

  sr = process(spl1, gain.smooth, factor) * (1+dynamics * (R.env - 1));
  sr = R.hp.HP_proc(sr);
  sr = R.lp.LP_proc(sr);

  spl0 = sl;
  spl1 = sr;
) : (
  sl = spl0;
  sr = spl1;
  upsampleL.updateUpHist(oversampling, sl);
  upsampleR.updateUpHist(oversampling, sr);

  loop(f=0; oversampling,
    f += 1;
    sl = oversampling*upsampleL.upSample(oversampling);
    sr = oversampling*upsampleR.upSample(oversampling);

    sl = process(sl, gain.smooth, factor) * (1+dynamics * (L.env - 1));
    sl = L.hp.HP_proc(sl);
    sl = L.lp.LP_proc(sl);
    sr = process(sr, gain.smooth, factor) * (1+dynamics * (R.env - 1));
    sr = R.hp.HP_proc(sr);
    sr = R.lp.LP_proc(sr);

    downL.updateDownHist(oversampling, sl);
    downR.updateDownHist(oversampling, sr);

    ( f == 1 ) ? (
      spl0 = downL.downSample(oversampling);
      spl1 = downR.downSample(oversampling);
    );
  );
);

@gfx 300 200

winx = 10;
winy = 10;
winw = gfx_w - 20;
winh = gfx_h - 20;

gfx_set(1,1,1);

gfx_rect(winx, winy, winw, winh, 0);

function draw_wave()
local(i,x,y)
(
  x = -1;
  y = process(x, gain.smooth, factor);
  gfx_x = (x+1)/2*winw+winx;
  gfx_y = min(1,max(0,(1-(y+1)/2)))*winh+winy;
  step = 2 / winw;
  loop(i=-1; winw,
    gfx_lineto((i+1)/2*winw+winx, min(1,max(0,(1-(process(i, gain.smooth, factor)+1)/2)))*winh+winy);
    i += step;
  );
);

gfx_set(0.5,0.5,0.5,0.5);
gfx_line(winx+winw/2, winy, winx+winw/2, winy+winh);
gfx_line(winx, winy+winh/2, winx+winw, winy+winh/2);
gfx_set(1,1,1);
draw_wave();
