@init

function recalc_beam(buf, ratio)
global(bfree)
local(i, m, n, f0)
(
  i = 0;
  loop(m=1; 8,
    loop(n=1; 8,
      buf[i] = sqrt(m^4 + (ratio*bfree[i])^4);
      n+=1;i+=1;
    );
    m+=1;
  );
  f0 = buf[0];
  loop(i=0; 64,
     buf[i] = buf[i]/f0;
     i += 1;
  );
);

function recalc_membrane(buf, ratio)
local(i, m, n, f0)
(
  i = 0;
  loop(m=1; 8,
    loop(n=1; 8,
      buf[i] = sqrt(m^2 + (ratio*n)^2);
      n+=1;i+=1;
    );
    m+=1;
  );
  f0 = buf[0];
  loop(i=0; 64,
     buf[i] = buf[i]/f0;
     i += 1;
  );
);

function recalc_plate(buf, ratio)
local(i, m, n, f0)
(
  i = 0;
  loop(m=1; 8,
    loop(n=1; 8,
      buf[i] = m^2 + (ratio*n)^2;
      n+=1;i+=1;
    );
    m+=1;
  );
  f0 = buf[0];
  loop(i=0; 64,
     buf[i] = buf[i]/f0;
     i += 1;
  );
);

function init_models(freemem)
global(bfree, string, beam, metal, membrane, plate, drumhead, marimba, open_tube, closed_tube, b_string, b_beam, b_plate, b_metal, b_membrane, b_drumhead, b_marimba, b_open_tube, b_closed_tube)
local(n)
(
  bfree = freemem; freemem += 64;
  bfree[0] = 1.50561873;bfree[1] = 2.49975267;bfree[2] = 3.5;
  loop(n=3; 61,
    bfree[n] = n + 0.5;
    n+=1;
  );
  // string model: fk *= k
  string = freemem; freemem += 64;
  string[0] = 1;string[1] = 2;string[2] = 3;string[3] = 4;string[4] = 5;string[5] = 6;string[6] = 7;string[7] = 8;string[8] = 9;string[9] = 10;string[10] = 11;string[11] = 12;string[12] = 13;string[13] = 14;string[14] = 15;string[15] = 16;string[16] = 17;string[17] = 18;string[18] = 19;string[19] = 20;string[20] = 21;string[21] = 22;string[22] = 23;string[23] = 24;string[24] = 25;string[25] = 26;string[26] = 27;string[27] = 28;string[28] = 29;string[29] = 30;string[30] = 31;string[31] = 32;string[32] = 33;string[33] = 34;string[34] = 35;string[35] = 36;string[36] = 37;string[37] = 38;string[38] = 39;string[39] = 40;string[40] = 41;string[41] = 42;string[42] = 43;string[43] = 44;string[44] = 45;string[45] = 46;string[46] = 47;string[47] = 48;string[48] = 49;string[49] = 50;string[50] = 51;string[51] = 52;string[52] = 53;string[53] = 54;string[54] = 55;string[55] = 56;string[56] = 57;string[57] = 58;string[58] = 59;string[59] = 60;string[60] = 61;string[61] = 62;string[62] = 63;string[63] = 64;
  // beam model: fmn *= sqrt(m**4 + (2*Bfree[n])**4)
  // where Bfree[n] is the nth solution of cos($pi*x) = 1/cos($pi*x)
  // https://nathan.ho.name/posts/exploring-modal-synthesis
  beam = freemem; freemem += 64;
  beam[0] = 1.0;beam[1] = 2.742118730723096;beam[2] = 5.372437705395023;beam[3] = 8.879796231350905;beam[4] = 13.26432297929055;beam[5] = 18.525894832548836;beam[6] = 24.664464701923304;beam[7] = 31.680011427264994;beam[8] = 39.57480167993186;beam[9] = 48.34386187557112;beam[10] = 57.98998201587341;beam[11] = 68.51312839987956;beam[12] = 79.91327932335997;beam[13] = 92.19042029669127;beam[14] = 105.34454134738507;beam[15] = 119.37563542989709;beam[16] = 134.286605658006;beam[17] = 150.07132597088105;beam[18] = 166.73305349293955;beam[19] = 184.27177735520195;beam[20] = 202.68748915580662;beam[21] = 221.9801823173097;beam[22] = 242.14985163115497;beam[23] = 263.1964929295172;beam[24] = 285.1237904740257;beam[25] = 307.92409320904443;beam[26] = 331.6013888047332;beam[27] = 356.1556713642617;beam[28] = 381.58693597293706;beam[29] = 407.89517850825996;beam[30] = 435.08039549149447;beam[31] = 463.1425839706985;beam[32] = 492.0862467609114;beam[33] = 521.9021136490643; beam[34] = 552.5949669402571; beam[35] = 584.164802709515;  beam[36] = 616.6116175480827; beam[37] = 649.9354084840451; beam[38] = 684.1361729168341; beam[39] = 719.2139085629082; beam[40] = 755.1739518807949; beam[41] = 792.0053758900387; beam[42] = 829.7137826702212; beam[43] = 868.2991693165571; beam[44] = 907.7615332399005; beam[45] = 948.1008721264657; beam[46] = 989.3171839034187; beam[47] = 1031.4104667093834;beam[48] = 1074.3868982163283;beam[49] = 1118.233875919467; beam[50] = 1162.9578340759736;beam[51] = 1208.5587703942417;beam[52] = 1255.0366827948008;beam[53] = 1302.3915693871795;beam[54] = 1350.6234284496627;beam[55] = 1399.7322584115318;beam[56] = 1449.7250824905104;beam[57] = 1500.5876119645127;beam[58] = 1552.3271202881517;beam[59] = 1604.9436055754263;beam[60] = 1658.4370660924033;beam[61] = 1712.8075002427393;beam[62] = 1768.0549065547818;beam[63] = 1824.179283670064;
  // squared/metal model: fk *= k**2
  metal = freemem; freemem += 64;
  metal[0] = 1.0;metal[1] = 4.0;metal[2] = 9.0;metal[3] = 16.0;metal[4] = 24.999999999999996;metal[5] = 36.0;metal[6] = 49.0;metal[7] = 64.0;metal[8] = 81.0;metal[9] = 99.99999999999999;metal[10] = 121.0;metal[11] = 144.0;metal[12] = 169.0;metal[13] = 196.0;metal[14] = 225.0;metal[15] = 256.0;metal[16] = 289.0;metal[17] = 324.0;metal[18] = 361.0;metal[19] = 399.99999999999994;metal[20] = 441.0;metal[21] = 484.0;metal[22] = 529.0;metal[23] = 576.0;metal[24] = 625.0;metal[25] = 676.0;metal[26] = 729.0;metal[27] = 784.0;metal[28] = 840.9999999999999;metal[29] = 900.0;metal[30] = 961.0;metal[31] = 1024.0;metal[32] = 1089.0;metal[33] = 1156.0;metal[34] = 1225.0;metal[35] = 1296.0;metal[36] = 1369.0;metal[37] = 1444.0;metal[38] = 1521.0;metal[39] = 1599.9999999999998;metal[40] = 1680.9999999999998;metal[41] = 1764.0;metal[42] = 1849.0;metal[43] = 1936.0;metal[44] = 2024.9999999999998;metal[45] = 2116.0;metal[46] = 2209.0;metal[47] = 2304.0;metal[48] = 2401.0;metal[49] = 2500.0;metal[50] = 2601.0;metal[51] = 2704.0;metal[52] = 2808.9999999999995;metal[53] = 2916.0;metal[54] = 3025.0;metal[55] = 3136.0;metal[56] = 3248.9999999999995;metal[57] = 3363.9999999999995;metal[58] = 3481.0;metal[59] = 3600.0;metal[60] = 3720.9999999999995;metal[61] = 3844.0;metal[62] = 3968.9999999999995;metal[63] = 4096.0;
  // membrane model: fmn *= sqrt(m**2 + (0.78*n)**2)
  membrane = freemem; freemem += 64;
  membrane[0] = 1.0;membrane[1] = 1.46109285817633;membrane[2] = 2.0065176070089703;membrane[3] = 2.583401188563129;membrane[4] = 3.17463993575823;membrane[5] = 3.773492277607296;membrane[6] = 4.376834180480457;membrane[7] = 4.983035133780558;membrane[8] = 1.6926924291749292;membrane[9] = 2.0;membrane[10] = 2.427204269735683;membrane[11] = 2.92218571635266;membrane[12] = 3.455943631122641;membrane[13] = 4.013035214017941;membrane[14] = 4.584962933678762;membrane[15] = 5.166802377126258;membrane[16] = 2.4441536557186816;membrane[17] = 2.6662106880321503;membrane[18] = 3.0;membrane[19] = 3.4128944891151236;membrane[20] = 3.8797198113361246;membrane[21] = 4.38327857452899;membrane[22] = 4.912287098306147;membrane[23] = 5.459352181097535;membrane[24] = 3.213415363586011;membrane[25] = 3.3853848583498585;membrane[26] = 3.6540595515354726;membrane[27] = 4.0;membrane[28] = 4.405039956758808;membrane[29] = 4.854408539471366;membrane[30] = 5.336920061454232;membrane[31] = 5.84437143270532;membrane[32] = 3.990195644111825;membrane[33] = 4.129945958302949;membrane[34] = 4.352904109387891;membrane[35] = 4.647109099145228;membrane[36] = 5.0;membrane[37] = 5.400083818557902;membrane[38] = 5.837665519855606;membrane[39] = 6.304942539213217;membrane[40] = 4.770823412246371;membrane[41] = 4.888307311437363;membrane[42] = 5.078077287524788;membrane[43] = 5.332421376064301;membrane[44] = 5.6426141771832246;membrane[45] = 6.0;membrane[46] = 6.3966736257417525;membrane[47] = 6.825788978230247;membrane[48] = 5.553676490089963;membrane[49] = 5.654919530531964;membrane[50] = 5.819745309187935;membrane[51] = 6.042953272833355;membrane[52] = 6.318359065318225;membrane[53] = 6.639470349789949;membrane[54] = 7.0;membrane[55] = 7.394184316141261;membrane[56] = 6.337930329019764;membrane[57] = 6.426830727172022;membrane[58] = 6.5723263585085;membrane[59] = 6.770769716699717;membrane[60] = 7.017670523558341;membrane[61] = 7.308119103070945;membrane[62] = 7.63714857122281;membrane[63] = 8.0;
  // plate model: fmn *= m**2 + (0.78*n)**2
  plate = freemem; freemem += 64;
  plate[0] = 1.0;plate[1] = 2.134792340213877;plate[2] = 4.026112907237005;plate[3] = 6.673961701069386;plate[4] = 10.078338721711017;plate[5] = 14.239243969161897;plate[6] = 19.156677443422033;plate[7] = 24.83063914449142;plate[8] = 2.8652076597861225;plate[9] = 4.0;plate[10] = 5.891320567023128;plate[11] = 8.539169360855508;plate[12] = 11.943546381497141;plate[13] = 16.10445162894802;plate[14] = 21.021885103208156;plate[15] = 26.695846804277544;plate[16] = 5.973887092762994;plate[17] = 7.108679432976872;plate[18] = 9.0;plate[19] = 11.647848793832381;plate[20] = 15.052225814474012;plate[21] = 19.21313106192489;plate[22] = 24.130564536185027;plate[23] = 29.804526237254414;plate[24] = 10.326038298930614;plate[25] = 11.46083063914449;plate[26] = 13.352151206167619;plate[27] = 16.0;plate[28] = 19.404377020641633;plate[29] = 23.565282268092513;plate[30] = 28.482715742352646;plate[31] = 34.15667744342203;plate[32] = 15.921661278288981;plate[33] = 17.056453618502857;plate[34] = 18.947774185525986;plate[35] = 21.595622979358367;plate[36] = 25.0;plate[37] = 29.16090524745088;plate[38] = 34.07833872171101;plate[39] = 39.7523004227804;plate[40] = 22.760756030838103;plate[41] = 23.895548371051976;plate[42] = 25.786868938075106;plate[43] = 28.434717731907487;plate[44] = 31.839094752549116;plate[45] = 36.0;plate[46] = 40.91743347426013;plate[47] = 46.591395175329524;plate[48] = 30.843322556577967;plate[49] = 31.97811489679184;plate[50] = 33.86943546381497;plate[51] = 36.517284257647354;plate[52] = 39.92166127828899;plate[53] = 44.082566525739864;plate[54] = 49.0;plate[55] = 54.67396170106939;plate[56] = 40.16936085550858;plate[57] = 41.304153195722456;plate[58] = 43.195473762745586;plate[59] = 45.84332255657796;plate[60] = 49.2476995772196;plate[61] = 53.408604824670476;plate[62] = 58.32603829893061;plate[63] = 64.0;
  // drumhead model: fmn *= Jmn
  // where Jmn is the bessel root(m,n)
  drumhead = freemem; freemem += 64;
  drumhead[0] = 1.0;drumhead[1] = 1.593340505695112;drumhead[2] = 2.1355487866494034;drumhead[3] = 2.295417267427694;drumhead[4] = 2.6530664045492145;drumhead[5] = 2.9172954551172228;drumhead[6] = 3.155464815408362;drumhead[7] = 3.5001474903090264;drumhead[8] = 3.5984846739581138;drumhead[9] = 3.6474511791052775;drumhead[10] = 4.058931883331434;drumhead[11] = 4.131738159726707;drumhead[12] = 4.230439127905234;drumhead[13] = 4.6010445344331075;drumhead[14] = 4.610051645437306;drumhead[15] = 4.831885262930598;drumhead[16] = 4.903280573212368;drumhead[17] = 5.1307689067016575;drumhead[18] = 5.412118429982582;drumhead[19] = 5.5403985098530635;drumhead[20] = 5.650842376925684;drumhead[21] = 5.976540221648715;drumhead[22] = 6.152609171589257;drumhead[23] = 6.1631367313038865;drumhead[24] = 6.208732130572546;drumhead[25] = 6.528612451522295;drumhead[26] = 6.746213299505839;drumhead[27] = 6.848991602808508;drumhead[28] = 7.0707081490386905;drumhead[29] = 7.325257332462771;drumhead[30] = 7.468242109085181;drumhead[31] = 7.514500962483965;drumhead[32] = 7.604536126938166;drumhead[33] = 7.892520026843893;drumhead[34] = 8.071028338967128;drumhead[35] = 8.1568737689496;drumhead[36] = 8.45000551018646;drumhead[37] = 8.66047555520746;drumhead[38] = 8.781093075730398;drumhead[39] = 8.820447105611922;drumhead[40] = 8.999214496283312;drumhead[41] = 9.238840557670077;drumhead[42] = 9.390589484063241;drumhead[43] = 9.464339027734203;drumhead[44] = 9.807815107462856;drumhead[45] = 9.98784275554081;drumhead[46] = 10.092254814868133;drumhead[47] = 10.126502295693772;drumhead[48] = 10.368705458854519;drumhead[49] = 10.574713443493692;drumhead[50] = 10.706875023386747;drumhead[51] = 10.77153891878896;drumhead[52] = 11.152639282954734;drumhead[53] = 11.310212368186301;drumhead[54] = 11.402312929615599;drumhead[55] = 11.722758172320448;drumhead[56] = 11.903823217314876;drumhead[57] = 12.020976194473256;drumhead[58] = 12.48894011894477;drumhead[59] = 12.6291936518746;drumhead[60] = 13.066558649839825;drumhead[61] = 13.228284530761863;drumhead[62] = 13.819314942198952;drumhead[63] = 14.40316086180383;
  // marimba model: I couldn't program this one, instead the model was created
  // using frequency analysis on a marimba sample from chromaphone
  marimba = freemem; freemem += 64;
  marimba[0] = 1.0;marimba[1] = 3.9393939393939394;marimba[2] = 10.575757575757576;marimba[3] = 19.0;marimba[4] = 26.757575757575758;marimba[5] = 36.93939393939394;marimba[6] = 49.18181818181818;marimba[7] = 63.18181818181818;marimba[8] = 78.9090909090909;marimba[9] = 96.39393939393939;marimba[10] = 115.63636363636364;marimba[11] = 136.6060606060606;marimba[12] = 159.36363636363637;marimba[13] = 183.8181818181818;marimba[14] = 210.06060606060606;marimba[15] = 238.03030303030303;marimba[16] = 267.75757575757575;marimba[17] = 299.24242424242425;marimba[18] = 442.6363636363636;marimba[19] = 568.5454545454545;marimba[20] = 614.0;marimba[21] = 100000;marimba[22] = 100000;marimba[23] = 100000;marimba[24] = 100000;marimba[25] = 100000;marimba[26] = 100000;marimba[27] = 100000;marimba[28] = 100000;marimba[29] = 100000;marimba[30] = 100000;marimba[31] = 100000;marimba[32] = 100000;marimba[33] = 100000;marimba[34] = 100000;marimba[35] = 100000;marimba[36] = 100000;marimba[37] = 100000;marimba[38] = 100000;marimba[39] = 100000;marimba[40] = 100000;marimba[41] = 100000;marimba[42] = 100000;marimba[43] = 100000;marimba[44] = 100000;marimba[45] = 100000;marimba[46] = 100000;marimba[47] = 100000;marimba[48] = 100000;marimba[49] = 100000;marimba[50] = 100000;marimba[51] = 100000;marimba[52] = 100000;marimba[53] = 100000;marimba[54] = 100000;marimba[55] = 100000;marimba[56] = 100000;marimba[57] = 100000;marimba[58] = 100000;marimba[59] = 100000;marimba[60] = 100000;marimba[61] = 100000;marimba[62] = 100000;marimba[63] = 100000;
  // closed tube harmonics, used for freqency shifts
  open_tube = freemem; freemem += 64;
  loop(n=1; 64, open_tube[n-1] = n; n += 1;);
  // open tube harmonics, used for frequency shifts
  closed_tube = freemem; freemem += 64;
  loop(n=1; 64, closed_tube[n-1] = 2*n - 1; n +=1);

  // Copy models to resonator B
  b_string = freemem; freemem += 64;
  memcpy(b_string, string, 64);
  b_beam = freemem; freemem += 64;
  memcpy(b_beam, beam, 64);
  b_metal = freemem; freemem += 64;
  memcpy(b_metal, metal, 64);
  b_plate = freemem; freemem += 64;
  memcpy(b_plate, plate, 64);
  b_drumhead = freemem; freemem += 64;
  memcpy(b_drumhead, drumhead, 64);
  b_marimba = freemem; freemem += 64;
  memcpy(b_marimba, marimba, 64);
  b_open_tube = freemem; freemem += 64;
  memcpy(b_open_tube, open_tube, 64);
  b_closed_tube = freemem; freemem += 64;
  memcpy(b_closed_tube, closed_tube, 64);

  freemem
);

function modal_init(f_0, k, ratio, ratio_max, rel, vel, resAB)
global(srate, npartials, inharmonic, decay, release, freq_damp, tone, hit_position, vel_res_decay, vel_res_hit, vel_res_inharm, b_inharmonic, b_decay, b_release, b_freq_damp, b_tone, b_hit_position, b_vel_res_decay, b_vel_res_hit, b_vel_res_inharm)
instance(a1, a2, b0, b2, a0, a1, a2)
local(f_k, gamma_k, tone_gain, amp_k, decay_k, alpha, f_max, damp_k, inharm_k, omega, _inharmonic, _decay, _release, _freq_damp, _tone, _hit_position, _vel_res_decay, _vel_res_hit, _vel_res_inharm)
(
  // Load resonator A or B globals
  resAB ? (
    _inharmonic = inharmonic;
    _decay = decay;
    _release = release;
    _freq_damp = freq_damp;
    _tone = tone;
    _hit_position = hit_position;
    _vel_res_decay = vel_res_decay;
    _vel_res_hit = vel_res_hit;
    _vel_res_inharm = vel_res_inharm;
  ) : (
    _inharmonic = b_inharmonic;
    _decay = b_decay;
    _release = b_release;
    _freq_damp = b_freq_damp;
    _tone = b_tone;
    _hit_position = b_hit_position;
    _vel_res_decay = b_vel_res_decay;
    _vel_res_hit = b_vel_res_hit;
    _vel_res_inharm = b_vel_res_inharm;
  );

  inharm_k = min(1, exp(log(_inharmonic) + vel * _vel_res_inharm * -log(0.0001))) - 0.0001; // normalize velocity contribution on a logarithmic scale
  inharm_k = sqrt(1 + inharm_k * sqr(ratio-1));
  f_k = max(20, f_0 * ratio * inharm_k);

  (f_k < 0.48 * srate) ? (
    f_max = min(f_0 * ratio_max * inharm_k, 20000);
    omega = 2 * $pi * f_k / srate;
    alpha = 2 * $pi / srate; // aprox 1 sec decay

    decay_k = min(100, exp(log(_decay) + vel * _vel_res_decay * (log(100) - log(0.01)))); // normalize velocity contribution on a logarithmic scale
    decay_k = rel ? decay_k * _release : decay_k;

    damp_k = _freq_damp <= 0
      ? pow(f_0 / f_k, _freq_damp * 2)
      : pow(f_max / f_k, _freq_damp * 2);

    decay_k /= damp_k;

    tone_gain = _tone <= 0
      ? pow(f_k / f_0, _tone * 12 / 6)
      : pow(f_k / f_max, _tone * 12 / 6);

    amp_k = abs(sin($pi * k * min(.5, _hit_position / 100 + _vel_res_hit * vel / 2)));
    amp_k *= 25;

    // Bandpass filter coefficients (normalized)
    b0 = alpha * tone_gain * amp_k;
    b2 = -alpha * tone_gain * amp_k;
    a0 = 1 + alpha / decay_k;
    a1 = -2 * cos(omega);
    a2 = 1 - alpha / decay_k;
    1
  ) : (
    b0 = b2 = a0 = a1 = a2 = 0;
    0
  );
);

function waveguide_init(f_0, rel, vel, resAB)
global(srate, tube_buf, tube_len, decay, vel_res_decay, release, b_tube_buf, b_tube_len, b_decay, b_vel_res_decay, b_release)
instance(read_ptr, write_ptr, tube_decay)
local(tlength, decay_k, _tube_buf, _tube_len, _decay, _vel_res_decay, _release)
(
  // Load resonator A or B globals
  resAB ? (
    _tube_buf = tube_buf;
    _tube_len = tube_len;
    _decay = decay;
    _vel_res_decay = vel_res_decay;
    _release = release;
  ) : (
    _tube_buf = b_tube_buf;
    _tube_len = b_tube_len;
    _decay = b_decay;
    _vel_res_decay = b_vel_res_decay;
    _release = b_release;
  );

  tlength = srate / f_0;
  read_ptr = (write_ptr - tlength + _tube_len) % _tube_len;

  decay_k = min(100, exp(log(_decay) + vel * _vel_res_decay * (log(100) - log(0.01)))); // normalize velocity contribution on a logarithmic scale
  decay_k = rel ? decay_k * _release : decay_k;
  tube_decay = exp(-$pi / f_0 / (srate * decay_k / 125000)); // 125000 set by hear so that decay approximates in seconds
);

function modal_process(x)
instance(b0, b2, a0, a1, a2, x1, x2, y1, y2)
local(output)
(
  output = ((b0 * x + b2 * x2) - (a1 * y1 + a2 * y2)) / a0;

  x2 = x1;
  x1 = x;
  y2 = y1;
  y1 = output;

  output;
);

function waveguide_process(x, nstring)
globals(tube_buf, tube_len, tube_radius, model)
instance(y, y1, write_ptr, read_ptr, tube_decay)
local(sample, dsample)
(
  sample = tube_buf[(nstring - 1) * tube_len + read_ptr];
  // Apply lowpass filter for frequency damping (tube radius)
  y = tube_radius * sample + (1 - tube_radius) * y1;
  y1 = y;

  // Apply decay to sample
  dsample = y * tube_decay;
  model == 8 ? dsample *= -1; // closed tube, inverting dsample causes only odd harmonics
  tube_buf[(nstring - 1) * tube_len + write_ptr] = x + dsample;

  write_ptr = (write_ptr + 1) % tube_len;
  read_ptr = (read_ptr + 1) % tube_len;

  dsample
);

/**
  Same as waveguide_process() but using resonator B globals
*/
function b_waveguide_process(x, nstring)
globals(b_tube_buf, b_tube_len, b_tube_radius, b_model)
instance(y, y1, write_ptr, read_ptr, tube_decay)
local(sample, dsample)
(
  sample = b_tube_buf[(nstring - 1) * b_tube_len + read_ptr];
  // Apply lowpass filter for frequency damping (tube radius)
  y = b_tube_radius * sample + (1 - b_tube_radius) * y1;
  y1 = y;

  // Apply decay to sample
  dsample = y * tube_decay;
  b_model == 8 ? dsample *= -1; // closed tube, inverting dsample causes only odd harmonics
  b_tube_buf[(nstring - 1) * b_tube_len + write_ptr] = x + dsample;

  write_ptr = (write_ptr + 1) % b_tube_len;
  read_ptr = (read_ptr + 1) % b_tube_len;

  dsample
);

function modal_clear()
instance(x1, x2, y1, y2)
(
  x1 = x2 = y1 = y2 = 0;
);

function waveguide_clear(nstring)
globals(tube_buf, tube_len, b_tube_buf, b_tube_len)
instance(y, y1, read_ptr, write_ptr)
(
  y = y1 = read_ptr = write_ptr = 0;
  memset(tube_buf + (nstring - 1) * tube_len, 0, tube_len);
  memset(b_tube_buf + (nstring - 1) * b_tube_len, 0, b_tube_len);
);

function freq_shift(fa,fb)
globals(freq_split)
local(avg, k, delta, w, k)
(
  avg = (fa + fb) / 2;
  k = freq_split + cos(avg) / 5; // add some pseudo random offset to coupling so that frequency couples are not in perfect sync
  w = avg + sqrt(sqr((fa - fb) / 2) + sqr(k / 2.5));
  abs(max(fa, fb) - w)
);

function string_init(freq, rel, resAB)
globals(open_tube,models, b_models, model, b_model, npartials, couple, a_on, b_on, f_shifts)
local(ratio_max, buf, i, j, a_mdl, b_mdl, fa, fb, shift)
(
  this.f0 = freq;
  this.rel = rel;
  ratio_max = resAB ? models[model][npartials-1] : b_models[b_model][npartials-1];
  resAB 
    ? memcpy(f_shifts, models[model], 64)
    : memcpy(f_shifts, b_models[b_model], 64);
  
  couple && a_on && b_on ? (
    // calculate frequency splitting for serial coupling
    a_mdl = resAB ? models[model] : b_models[b_model];
    b_mdl = resAB ? b_models[b_model] : models[model];
    loop(i=0; 64,
      fa = a_mdl[i];
      loop(j=0; 64,
        fb = b_mdl[j];
        abs(fa - fb) <= 4 ? (
          shift = freq_shift(fa*freq, fb*freq) / freq;
          !resAB && fa == fb ? shift *= -1;
          f_shifts[i] += fa > fb ? shift : -shift;
        );
        j += 1;
      );
      i += 1;
    );
    1;
  );
  
  (resAB && model < 7) || (!resAB && b_model < 7) ? (
    <?
      loop(i=1;npartials,
        printf("this.f%02d.modal_init(freq, %d, f_shifts[%d], ratio_max, rel, this.vel, resAB);\n", i, i, i-1);
        i += 1;
      );
    ?>
  ) : (
    // use waveguides for open and closed tube
    this.waveguide_init(max(20, f_shifts[0] * freq), rel, this.vel, resAB);
  );
);

function string_process(x, nstring, resAB)
globals(srate, model, b_model)
instance(active, silence)
local(out)
(
  out = 0;
  active ? ( // use active and silence to turn of strings process if not in use
    (resAB && model < 7) || (!resAB && b_model < 7) ? (
      <?
        loop(i=1;npartials,
          printf("out += this.f%02d.modal_process(x);\n", i);
          i += 1;
        );
      ?>
    ) : (
      // use waveguides for open and closed tube
      out += resAB
        ? this.waveguide_process(x, nstring)
        : this.b_waveguide_process(x, nstring)
    );
  );
  abs(out) + abs(x) > 0.00001
    ? silence = 0
    : silence += 1;
  silence >= srate ? active = 0;
  out
);

function string_clear(nstring)
globals(model)
(
  <?
    loop(i=1;npartials,
      printf("this.f%02d.modal_clear();\n", i);
      i += 1;
    );
  ?>
  this.waveguide_clear(nstring);
);
