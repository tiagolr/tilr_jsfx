desc:ws.gfxlib.jsfx-inc

@init

COLOR_ACTIVE = 0x008070;
COLOR_BG = 0xeeeeee;
COLOR_VEL = 0xaa5050;
COLOR_NEUTRAL = 0x333333;

selknob_nslider = 0;
selknob_velslider = 0;
selknob_min = 0;
selknob_max = 0;
selknob_is_log = 0;

wheelknob_nslider = 0;
wheelknob_velslider = 0;
wheelknob_min = 0;
wheelknob_max = 0;
wheelknob_is_log = 0;

doubleclk_nslider = 0;
doubleclk_velslider = 0;

function deg2rad (deg) (deg * $pi / 180;);
RAD130 = deg2rad(130);

function update_mouse_state()
instance(cap, x, y, lx, ly, dx, dy, right_click, left_click, lleft, lright, left, right, click_time, double_click, control, alt, lwheel, wheel)
global(mouse_cap, mouse_x, mouse_y, mouse_wheel)
(
  lleft = left;
  lright = right;
  lx = x;
  ly = y;
  cap = mouse_cap;
  control = mouse_cap & 4;
  alt = mouse_cap & 16;
  x = mouse_x;
  y = mouse_y;

  left = cap & 1 > 0;
  right = cap & 2 > 0;
  left_click = left && lleft == 0;
  right_click = right && lright == 0;
  dx = x - lx;
  dy = y - ly;

  wheel = mouse_wheel > lwheel ? 1 : mouse_wheel < lwheel ? -1 : 0;
  lwheel = mouse_wheel;

  left_click ? (
    time_precise() - click_time < .5 ? double_click = 1;
    click_time = time_precise();
  ) : (
    double_click = 0;
  );
);

function set_color(color) (
  gfx_r = (color & 0xFF0000) / 0xFF0000;
  gfx_g = (color & 0x00FF00) / 0x00FF00;
  gfx_b = (color & 0x0000FF) / 0x0000FF;
);

function log_scale (value, _max, _min)
local (minV, maxV, scale) (
    minV = log(_min);
    maxV = log(_max);

    scale = (maxV - minV) / (_max - _min);
    exp(minV + scale * (value - _min));
);

function inverse_log_scale (lg, _max, _min)
local (minV, maxV, scale) (
    minV = log(_min);
    maxV = log(_max);

    scale = (maxV - minV) / (_max - _min);
    (log(lg) - minV) / scale + _min;
);

function mouse_in_rect (x, y, w ,h) (
  mouse.x >= x && mouse.x <= x + w && mouse.y >= y && mouse.y <= y + h;
);

function draw_knob(x, y, nslider, label, default, _min, _max, is_log, is_sym, val_label, vel_slider)
local (scale, _offset, slider_val)
(
  //set_color(0x282D32);
  //set_color(0xaaaaaa);
  //gfx_arc(x+20, y+20, 20, -RAD130, RAD130, 1);
  //gfx_arc(x+20, y+20, 19.5, -RAD130, RAD130, 1);
  //gfx_arc(x+20, y+20, 19, -RAD130, RAD130, 1);
  //gfx_arc(x+20, y+20, 18.5, -RAD130, RAD130, 1);

  slider_val = slider(nslider);
  is_log ? (
    slider_val = inverse_log_scale(slider_val, _max, _min);
  );

  // linear map value from min/max to -130deg +130deg
  scale = (130 - -130) / (_max-_min);
  _offset = (-_min * (130 - -130)) / (_max - _min) + -130;
  slider_deg = slider_val * scale + _offset;
  slider_rad = deg2rad(slider_deg);

  set_color(0xaaaaaa);

  gfx_circle(x+20, y+20, 15, 1, 1);
  set_color(COLOR_ACTIVE);
  gfx_circle(x+20-sin(-slider_rad)*10, y+20-cos(-slider_rad)*10, 3, 1);

  // draw active curve
  gfx_arc(x+20, y+20, 20, is_sym ? 0 : -RAD130, slider_rad, 1);
  gfx_arc(x+20, y+20, 19.5, is_sym ? 0 : -RAD130, slider_rad, 1);
  gfx_arc(x+20, y+20, 19, is_sym ? 0 : -RAD130, slider_rad, 1);
  gfx_arc(x+20, y+20, 18.5, is_sym ? 0 : -RAD130, slider_rad, 1);

  // draw velocity map curve
  vel_slider && vel_mapping ? (
    set_color(COLOR_VEL);
    gfx_a = 0.5;
    gfx_circle(x+20, y+20, 15, 1, 1);
    gfx_a = 1;
  );

  vel_slider ? (
    set_color(COLOR_VEL);
    vel_rad = min(RAD130, slider_rad + deg2rad(slider(vel_slider) * 260));
    gfx_arc(x+20, y+20, 24, slider_rad, vel_rad, 1);
    gfx_arc(x+20, y+20, 23.5, slider_rad, vel_rad, 1);
    gfx_arc(x+20, y+20, 23, slider_rad, vel_rad, 1);
  );

  set_color(COLOR_NEUTRAL);
  gfx_x = x - 20;
  gfx_y = y + 20 * 2 + 5;
  vel_slider && selknob_velslider == vel_slider ? (
    gfx_drawstr(sprintf(#, "%i %%", slider(vel_slider)*100), 1, x+20+20*2, y+100);
  ) : selknob_nslider == nslider ? (
    gfx_drawstr(val_label, 1, x+20+20*2, y+100);
  ) : (
    gfx_drawstr(label, 1, x+20+20*2, y+100);
  );

  mouse_in_rect(x, y, 40, 40) ? (
    mouse.double_click ? (
      (vel_mapping && vel_slider) || (vel_slider && mouse.alt) ? (
        slider(vel_slider) = 0;
        sliderchange(slider(vel_slider));
        slider_automate(slider(vel_slider));
      ) : (
        slider(nslider) = default;
        doubleclk_nslider = nslider;
      );
    );
    mouse.left_click ? (
      (vel_mapping && vel_slider) || (vel_slider && mouse.alt) ? (
        selknob_velslider = vel_slider;
      ) : (
        selknob_nslider = nslider;
        selknob_min = _min;
        selknob_max = _max;
        selknob_is_log = is_log;
      );
    );
    mouse.wheel ? (
      (vel_mapping && vel_slider) || (vel_slider && mouse.alt) ? (
        wheelknob_velslider = vel_slider;
      ) : (
        wheelknob_nslider = nslider;
        wheelknob_min = _min;
        wheelknob_max = _max;
        wheelknob_is_log = is_log;
      );
    );
  );
);

function draw_button (x, y, w, label, toggled) (
  set_color(COLOR_ACTIVE);
  gfx_rect(x, y - 2, w, 10 + 2);
  gfx_x = x; gfx_y = y;
  !toggled ? (
    set_color(COLOR_BG);
    gfx_rect(x+1, y+1-2, w-2, 10);
  );
  set_color(toggled ? COLOR_BG : COLOR_ACTIVE);
  gfx_drawstr(label, 1, x+w, y+10);
);

function draw_button_vel (x, y, w, label, toggled) (
  set_color(COLOR_VEL);
  gfx_rect(x, y - 2, w, 10 + 2);
  gfx_x = x; gfx_y = y;
  !toggled ? (
    set_color(COLOR_BG);
    gfx_rect(x+1, y+1-2, w-2, 10);
  );
  set_color(toggled ? COLOR_BG : COLOR_VEL);
  gfx_drawstr(label, 1, x+w, y+10);
);
