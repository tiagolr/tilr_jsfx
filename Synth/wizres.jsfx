desc:WizRes
author: tilr
version: 1.0.0
changelog:
  First
about:
  # WizRes
tags: synth, instrument

<? npartials < 1 ? npartials = 32 ?>
config: npartials "Partials" 32 4 16 32 64

slider1:/tilr8_WizClick:none:Click
slider2:click_vol=80<0, 100, .01>Volume
slider3:click_pitch=0<-24,24,1>Pitch
slider4:click_ktrack=0<0,1,1{No, Yes}>KeyTrack

slider6:decay=1<0.01,100,0.01:log>Decay
slider7:freq_damp=0<-100,100,0.1>Material
slider8:tone=0<-100,100,0.1>Tone
slider9:hit_position=26<2,50,0.1>Hit Position
slider10:release=100<0,100,0.1>Release
slider11:inharmonic=0.01<0.01,100,0.001:log>Inharmonic
slider12:ratio=1<0.1,10,0.01:log>Ratio

import ws.array.jsfx-inc

@init
ext_noinit = 1;
<? printf("npartials = %d;\n", npartials); ?>
lfile = -1;
wavechn = 0;
wavesrate = 0;
wavelen = 0;
base_note = 60;
playback_speed = 1;
freemem = 100000;

// beam model: fmn *= sqrt(m**4 + (2*Bfree[n])**4)
// where Bfree[n] is the nth solution of cos($pi*x) = 1/cos($pi*x)
// https://nathan.ho.name/posts/exploring-modal-synthesis
beam = freemem; freemem += 64;
beam[0] = 1.0;beam[1] = 2.742118730723096;beam[2] = 5.372437705395023;beam[3] = 8.879796231350905;beam[4] = 13.26432297929055;beam[5] = 18.525894832548836;beam[6] = 24.664464701923304;beam[7] = 31.680011427264994;beam[8] = 39.57480167993186;beam[9] = 48.34386187557112;beam[10] = 57.98998201587341;beam[11] = 68.51312839987956;beam[12] = 79.91327932335997;beam[13] = 92.19042029669127;beam[14] = 105.34454134738507;beam[15] = 119.37563542989709;beam[16] = 134.286605658006;beam[17] = 150.07132597088105;beam[18] = 166.73305349293955;beam[19] = 184.27177735520195;beam[20] = 202.68748915580662;beam[21] = 221.9801823173097;beam[22] = 242.14985163115497;beam[23] = 263.1964929295172;beam[24] = 285.1237904740257;beam[25] = 307.92409320904443;beam[26] = 331.6013888047332;beam[27] = 356.1556713642617;beam[28] = 381.58693597293706;beam[29] = 407.89517850825996;beam[30] = 435.08039549149447;beam[31] = 463.1425839706985;beam[32] = 492.0862467609114;beam[33] = 521.9021136490643; beam[34] = 552.5949669402571; beam[35] = 584.164802709515;  beam[36] = 616.6116175480827; beam[37] = 649.9354084840451; beam[38] = 684.1361729168341; beam[39] = 719.2139085629082; beam[40] = 755.1739518807949; beam[41] = 792.0053758900387; beam[42] = 829.7137826702212; beam[43] = 868.2991693165571; beam[44] = 907.7615332399005; beam[45] = 948.1008721264657; beam[46] = 989.3171839034187; beam[47] = 1031.4104667093834;beam[48] = 1074.3868982163283;beam[49] = 1118.233875919467; beam[50] = 1162.9578340759736;beam[51] = 1208.5587703942417;beam[52] = 1255.0366827948008;beam[53] = 1302.3915693871795;beam[54] = 1350.6234284496627;beam[55] = 1399.7322584115318;beam[56] = 1449.7250824905104;beam[57] = 1500.5876119645127;beam[58] = 1552.3271202881517;beam[59] = 1604.9436055754263;beam[60] = 1658.4370660924033;beam[61] = 1712.8075002427393;beam[62] = 1768.0549065547818;beam[63] = 1824.179283670064;
// metal model: fk *= k**2
metal = freemem; freemem += 64;
metal[0] = 1.0;metal[1] = 4.0;metal[2] = 9.0;metal[3] = 16.0;metal[4] = 24.999999999999996;metal[5] = 36.0;metal[6] = 49.0;metal[7] = 64.0;metal[8] = 81.0;metal[9] = 99.99999999999999;metal[10] = 121.0;metal[11] = 144.0;metal[12] = 169.0;metal[13] = 196.0;metal[14] = 225.0;metal[15] = 256.0;metal[16] = 289.0;metal[17] = 324.0;metal[18] = 361.0;metal[19] = 399.99999999999994;metal[20] = 441.0;metal[21] = 484.0;metal[22] = 529.0;metal[23] = 576.0;metal[24] = 625.0;metal[25] = 676.0;metal[26] = 729.0;metal[27] = 784.0;metal[28] = 840.9999999999999;metal[29] = 900.0;metal[30] = 961.0;metal[31] = 1024.0;metal[32] = 1089.0;metal[33] = 1156.0;metal[34] = 1225.0;metal[35] = 1296.0;metal[36] = 1369.0;metal[37] = 1444.0;metal[38] = 1521.0;metal[39] = 1599.9999999999998;metal[40] = 1680.9999999999998;metal[41] = 1764.0;metal[42] = 1849.0;metal[43] = 1936.0;metal[44] = 2024.9999999999998;metal[45] = 2116.0;metal[46] = 2209.0;metal[47] = 2304.0;metal[48] = 2401.0;metal[49] = 2500.0;metal[50] = 2601.0;metal[51] = 2704.0;metal[52] = 2808.9999999999995;metal[53] = 2916.0;metal[54] = 3025.0;metal[55] = 3136.0;metal[56] = 3248.9999999999995;metal[57] = 3363.9999999999995;metal[58] = 3481.0;metal[59] = 3600.0;metal[60] = 3720.9999999999995;metal[61] = 3844.0;metal[62] = 3968.9999999999995;metal[63] = 4096.0;
// membrane model: fmn *= sqrt(m**2 + (0.75*n)**2)
membrane = freemem; freemem += 64;
membrane[0] = 1.0;membrane[1] = 1.1547005383792517;membrane[2] = 1.2909944487358058;membrane[3] = 1.4142135623730951;membrane[4] = 1.5275252316519468;membrane[5] = 1.6329931618554523;membrane[6] = 1.7320508075688772;membrane[7] = 1.825741858350554;membrane[8] = 1.7320508075688772;membrane[9] = 1.825741858350554;membrane[10] = 1.9148542155126764;membrane[11] = 2.0;membrane[12] = 2.0816659994661326;membrane[13] = 2.160246899469287;membrane[14] = 2.23606797749979;membrane[15] = 2.3094010767585034;membrane[16] = 2.516611478423583;membrane[17] = 2.5819888974716116;membrane[18] = 2.6457513110645907;membrane[19] = 2.7080128015453204;membrane[20] = 2.7688746209726918;membrane[21] = 2.8284271247461903;membrane[22] = 2.886751345948129;membrane[23] = 2.9439202887759492;membrane[24] = 3.3166247903554003;membrane[25] = 3.366501646120693;membrane[26] = 3.4156502553198664;membrane[27] = 3.4641016151377544;membrane[28] = 3.5118845842842465;membrane[29] = 3.5590260840104375;membrane[30] = 3.60555127546399;membrane[31] = 3.651483716701108;membrane[32] = 4.123105625617661;membrane[33] = 4.163331998932265;membrane[34] = 4.203173404306164;membrane[35] = 4.242640687119286;membrane[36] = 4.281744192888377;membrane[37] = 4.320493798938574;membrane[38] = 4.358898943540674;membrane[39] = 4.39696865275764;membrane[40] = 4.932882862316248;membrane[41] = 4.96655480858378;membrane[42] = 5.0;membrane[43] = 5.033222956847166;membrane[44] = 5.066228051190222;membrane[45] = 5.099019513592785;membrane[46] = 5.131601439446885;membrane[47] = 5.163977794943223;membrane[48] = 5.744562646538029;membrane[49] = 5.773502691896258;membrane[50] = 5.802298395176404;membrane[51] = 5.830951894845302;membrane[52] = 5.8594652770823155;membrane[53] = 5.8878405775518985;membrane[54] = 5.916079783099616;membrane[55] = 5.94418483337567;membrane[56] = 6.557438524302001;membrane[57] = 6.582805886043833;membrane[58] = 6.608075867199671;membrane[59] = 6.6332495807108005;membrane[60] = 6.658328118479393;membrane[61] = 6.683312551921142;membrane[62] = 6.708203932499369;membrane[63] = 6.733003292241386;
// plate model: fmn *= m**2 + (0.78*n)**2
plate = freemem; freemem += 64;
plate[0] = 1.0;plate[1] = 2.134792340213877;plate[2] = 4.026112907237005;plate[3] = 6.673961701069386;plate[4] = 10.078338721711017;plate[5] = 14.239243969161897;plate[6] = 19.156677443422033;plate[7] = 24.83063914449142;plate[8] = 2.8652076597861225;plate[9] = 4.0;plate[10] = 5.891320567023128;plate[11] = 8.539169360855508;plate[12] = 11.943546381497141;plate[13] = 16.10445162894802;plate[14] = 21.021885103208156;plate[15] = 26.695846804277544;plate[16] = 5.973887092762994;plate[17] = 7.108679432976872;plate[18] = 9.0;plate[19] = 11.647848793832381;plate[20] = 15.052225814474012;plate[21] = 19.21313106192489;plate[22] = 24.130564536185027;plate[23] = 29.804526237254414;plate[24] = 10.326038298930614;plate[25] = 11.46083063914449;plate[26] = 13.352151206167619;plate[27] = 16.0;plate[28] = 19.404377020641633;plate[29] = 23.565282268092513;plate[30] = 28.482715742352646;plate[31] = 34.15667744342203;plate[32] = 15.921661278288981;plate[33] = 17.056453618502857;plate[34] = 18.947774185525986;plate[35] = 21.595622979358367;plate[36] = 25.0;plate[37] = 29.16090524745088;plate[38] = 34.07833872171101;plate[39] = 39.7523004227804;plate[40] = 22.760756030838103;plate[41] = 23.895548371051976;plate[42] = 25.786868938075106;plate[43] = 28.434717731907487;plate[44] = 31.839094752549116;plate[45] = 36.0;plate[46] = 40.91743347426013;plate[47] = 46.591395175329524;plate[48] = 30.843322556577967;plate[49] = 31.97811489679184;plate[50] = 33.86943546381497;plate[51] = 36.517284257647354;plate[52] = 39.92166127828899;plate[53] = 44.082566525739864;plate[54] = 49.0;plate[55] = 54.67396170106939;plate[56] = 40.16936085550858;plate[57] = 41.304153195722456;plate[58] = 43.195473762745586;plate[59] = 45.84332255657796;plate[60] = 49.2476995772196;plate[61] = 53.408604824670476;plate[62] = 58.32603829893061;plate[63] = 64.0;
// drumhead model: fmn *= Jmn
// where Jmn is the bessel root(m,n)
drumhead = freemem; freemem += 64;
drumhead[0] = 1.0;drumhead[1] = 1.593340505695112;drumhead[2] = 2.1355487866494034;drumhead[3] = 2.295417267427694;drumhead[4] = 2.6530664045492145;drumhead[5] = 2.9172954551172228;drumhead[6] = 3.155464815408362;drumhead[7] = 3.5001474903090264;drumhead[8] = 3.5984846739581138;drumhead[9] = 3.6474511791052775;drumhead[10] = 4.058931883331434;drumhead[11] = 4.131738159726707;drumhead[12] = 4.230439127905234;drumhead[13] = 4.6010445344331075;drumhead[14] = 4.610051645437306;drumhead[15] = 4.831885262930598;drumhead[16] = 4.903280573212368;drumhead[17] = 5.1307689067016575;drumhead[18] = 5.412118429982582;drumhead[19] = 5.5403985098530635;drumhead[20] = 5.650842376925684;drumhead[21] = 5.976540221648715;drumhead[22] = 6.152609171589257;drumhead[23] = 6.1631367313038865;drumhead[24] = 6.208732130572546;drumhead[25] = 6.528612451522295;drumhead[26] = 6.746213299505839;drumhead[27] = 6.848991602808508;drumhead[28] = 7.0707081490386905;drumhead[29] = 7.325257332462771;drumhead[30] = 7.468242109085181;drumhead[31] = 7.514500962483965;drumhead[32] = 7.604536126938166;drumhead[33] = 7.892520026843893;drumhead[34] = 8.071028338967128;drumhead[35] = 8.1568737689496;drumhead[36] = 8.45000551018646;drumhead[37] = 8.66047555520746;drumhead[38] = 8.781093075730398;drumhead[39] = 8.820447105611922;drumhead[40] = 8.999214496283312;drumhead[41] = 9.238840557670077;drumhead[42] = 9.390589484063241;drumhead[43] = 9.464339027734203;drumhead[44] = 9.807815107462856;drumhead[45] = 9.98784275554081;drumhead[46] = 10.092254814868133;drumhead[47] = 10.126502295693772;drumhead[48] = 10.368705458854519;drumhead[49] = 10.574713443493692;drumhead[50] = 10.706875023386747;drumhead[51] = 10.77153891878896;drumhead[52] = 11.152639282954734;drumhead[53] = 11.310212368186301;drumhead[54] = 11.402312929615599;drumhead[55] = 11.722758172320448;drumhead[56] = 11.903823217314876;drumhead[57] = 12.020976194473256;drumhead[58] = 12.48894011894477;drumhead[59] = 12.6291936518746;drumhead[60] = 13.066558649839825;drumhead[61] = 13.228284530761863;drumhead[62] = 13.819314942198952;drumhead[63] = 14.40316086180383;
// marimba model: I couldn't program this one, this model was obtained by doing
// peak analysis after a FFT on a marimba sample from chromaphone
marimba = freemem; freemem += 64;
marimba[0] = 1.0;marimba[1] = 3.9393939393939394;marimba[2] = 10.575757575757576;marimba[3] = 19.0;marimba[4] = 26.757575757575758;marimba[5] = 36.93939393939394;marimba[6] = 49.18181818181818;marimba[7] = 63.18181818181818;marimba[8] = 78.9090909090909;marimba[9] = 96.39393939393939;marimba[10] = 115.63636363636364;marimba[11] = 136.6060606060606;marimba[12] = 159.36363636363637;marimba[13] = 183.8181818181818;marimba[14] = 210.06060606060606;marimba[15] = 238.03030303030303;marimba[16] = 267.75757575757575;marimba[17] = 299.24242424242425;marimba[18] = 442.6363636363636;marimba[19] = 568.5454545454545;marimba[20] = 614.0;marimba[21] = 100000;marimba[22] = 100000;marimba[23] = 100000;marimba[24] = 100000;marimba[25] = 100000;marimba[26] = 100000;marimba[27] = 100000;marimba[28] = 100000;marimba[29] = 100000;marimba[30] = 100000;marimba[31] = 100000;marimba[32] = 100000;marimba[33] = 100000;marimba[34] = 100000;marimba[35] = 100000;marimba[36] = 100000;marimba[37] = 100000;marimba[38] = 100000;marimba[39] = 100000;marimba[40] = 100000;marimba[41] = 100000;marimba[42] = 100000;marimba[43] = 100000;marimba[44] = 100000;marimba[45] = 100000;marimba[46] = 100000;marimba[47] = 100000;marimba[48] = 100000;marimba[49] = 100000;marimba[50] = 100000;marimba[51] = 100000;marimba[52] = 100000;marimba[53] = 100000;marimba[54] = 100000;marimba[55] = 100000;marimba[56] = 100000;marimba[57] = 100000;marimba[58] = 100000;marimba[59] = 100000;marimba[60] = 100000;marimba[61] = 100000;marimba[62] = 100000;marimba[63] = 100000;


freemem = poly.array_init(freemem, 10, 5); // [note, velocity, freq, playback_speed]
freemem = midi.array_init(freemem, 256, 4); // [offset, status, note, vel, nsample]
clickl = freemem; freemem += 500000; // click left channel buffer
clickr = freemem; freemem += 500000; // click right channel buffer
wavebuf = freemem; // file reader buffer

function db2gain (db) local (val) (
  val = 10^(db / 20);
  val <= 0.001 ? 0 : val;
);
function rc_set(rc)
instance(a) (
  a = 1 / (rc * srate + 1);
);
function rc_lp(sample)
instance(lp, a) (
  lp += a * (sample - lp);
);
function smooth()
instance (lp, smooth) (
  lp = smooth;
  smooth = this.rc_lp(this);
);

function normalize_vol_slider(val) ( val * 75 / 100 - 60 );
function note2freq(n) ( 440 * pow(2, (n - 69) / 12); );

function read_file(filehandle)
local(i)
(
  filehandle > 0 ? (
    file_riff(filehandle, wavechn, wavesrate);
    wavechn ? (
      wavelen = file_avail(filehandle);
      file_mem(filehandle,wavebuf, min(wavelen, 500000));
    );
    file_close(filehandle);
    wavechn == 2 ? (
      wavelen = (wavelen / 2) | 0;
      i = 0; loop(wavelen,
        clickl[i] = wavebuf[i*2];
        clickr[i] = wavebuf[i*2+1];
        i += 1;
      );
    ) : (
      memcpy(clickl,wavebuf,wavelen);
      memcpy(clickr,wavebuf,wavelen);
    );
  );
);

function on_file_change() (
  lfile = slider1;
  filehandle=file_open(slider1);
  read_file(filehandle);
);

// init smooth
gain.rc_set(0.0033);
gain.smooth = db2gain(normalize_vol_slider(click_vol));


function modal_init(f_0, k, rel)
instance(b, a1, a2)
local(f_k, gamma_k, tone_gain, amp_k, decay_k, f_max, damp_k, inharm_k)
(
  inharm_k = sqrt(1 + inharm * (k-1) * (k-1));
  f_k = f_0 * k * inharm_k;
  f_max = f_0 * npartials * inharm_k;
  omega_k = 2 * $pi * f_k / srate;
  decay_k = rel ? decay * release / 100 : decay;

  damp_k = freq_damp <= 0
    ? pow(f_0 / f_k, freq_damp / 100 * 2)
    : pow(f_max / f_k, freq_damp / 100 * 2);

  // exp(-pi*2 / (srate*decay)) is set by hear and it approximates the decay time in seconds
  gamma_k = exp(($pi * -2 / (srate * decay_k)) * damp_k);

  (f_k < 0.48 * srate) ? (
    tone_gain = tone <= 0
      ? pow(f_k / f_0, tone * 12 / 100 / 6)
      : pow(f_k / f_max, tone * 12 / 100 / 6);
    amp_k = abs(sin($pi * k * hit_position / 100));
    b = gamma_k * amp_k * sin(omega_k) * tone_gain * sqrt(f_k) / 500;
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function modal_init_ratio(f_0, k, ratio, rel)
instance(b, a1, a2)
local(f_k, gamma_k, tone_gain, amp_k, decay_k, f_max, damp_k, inharm_k)
(
  inharm_k = sqrt(1 + inharm * (k-1) * (k-1));
  f_k = f_0 * ratio * inharm_k;
  f_max = f_0 * npartials * inharm_k;
  omega_k = 2 * $pi * f_k / srate;
  decay_k = rel ? decay * release / 100 : decay;

  damp_k = freq_damp <= 0
    ? pow(f_0 / f_k, freq_damp / 100 * 2)
    : pow(f_max / f_k, freq_damp / 100 * 2);

  // exp(-pi*2 / (srate*decay)) is set by hear and it approximates the decay time in seconds
  gamma_k = exp(($pi * -2 / (srate * decay_k)) * damp_k);

  (f_k < 0.48 * srate) ? (
    tone_gain = tone <= 0
      ? pow(f_k / f_0, tone * 12 / 100 / 6)
      : pow(f_k / f_max, tone * 12 / 100 / 6);
    amp_k = abs(sin($pi * k * hit_position / 100));
    b = gamma_k * amp_k * sin(omega_k) * tone_gain * sqrt(f_k) / 500;
    a1 = -2 * gamma_k * cos(omega_k);
    a2 = gamma_k * gamma_k;
    1
  ) : (
    b = a1 = a2 = 0;
    0
  );
);

function modal_process(x)
instance(b, a1, a2, y, y1, y2)
(
  y = b * x - a1 * y1 - a2 * y2;
  y2 = y1;
  y1 = y;
  y
);

function on_slider()
(
  plate2 = 60000;
  n = 0;
  bfree = 40000;
  bfree[0] = 1.50561873;
  bfree[1] = 2.49975267;
  bfree[2] = 3.5;
  loop(n=3; 64,
    bfree[n] = n + 0.5;
    n+=1;
  );

  n =0;
  loop(i=1; 8,
    loop(j=1; 8,
      plate2[n] = (i^2 + (ratio*j)^2);
      j+=1;
      n+=1;
    );
    i+=1;
  );


 fund = plate2[0];
 loop(k=0; 64,
    plate2[k] = plate2[k]/fund;
    k += 1;
 );

 nnn1 = plate2[0];
 nnn2 = plate2[1];
 nnn3 = plate2[2];
 nnn4 = plate2[3];

  lfile != slider1 ? on_file_change();
  gain = db2gain(normalize_vol_slider(click_vol));
  inharm = inharmonic == 0.01 ? 0 : inharmonic / 100;
  playback_speed = 2^((click_pitch / 12) | 0);

  <?
    loop(i=1;npartials,
      printf("f%02d.modal_init_ratio(GLOBAL_FREQ, %d, marimba[%d], 0);\n", i, i, i-1);
      i += 1;
    );
  ?>
);

@slider

rel_pos = min(max(0.01, position / 100), 0.99);

on_slider();

@block
// remove queued midi messages that have been processed
ptr = midi.array_first();
while (ptr >= 0) (
  ptr[0] < 0 ? (
    midi.array_remove(ptr);
    ptr = midi.array_first();
  ) : (
    ptr = midi.array_next(ptr);
  );
);

while (midirecv(offset, msg1, note, vel)) (
  event = msg1 & 0xF0;
  channel = msg1 & 0x0F;

  // note on/off
  event == 0x90 || event == 0x80 ? (
    // prevent midi buffer overflow
    midi.size == 256 ? (
      midi.array_remove(midi.array_first());
    );
    ptr = midi.array_add();
    ptr[0] = offset;
    ptr[1] = msg1;
    ptr[2] = note;
    ptr[3] = vel;
  );

  // All notes off
  event == 0xB0 && note == 123 ? (
    poly.array_clear();
    //hold.array_clear();
  );

  midisend(offset, msg1, note, vel);
);

@sample
gain.smooth();
function on_note(p)
local (ptr, note_repeat, note, vel, env, freq)
(
  note = p[2];
  vel = p[3];

  // remove note if it is already playing
  ptr = poly.array_find(note);
  ptr >= 0 ? (
    poly.array_remove(ptr);
  );

  // if polyphony is full
  poly.size >= 12 ? (
    poly.array_remove(poly.array_first());
  );

  freq = note2freq(note);
  GLOBAL_FREQ = freq;
  ptr = poly.array_add();
  ptr[0] = note;
  ptr[1] = vel / 127;
  ptr[2] = freq / srate;
  ptr[3] = 0;
  ptr[4] = 2 ^ ((note - base_note) / 12);

  //<?
  //  loop(i=1;npartials,
  //    printf("f%02d.modal_init(freq, %d, 0);\n", i, i);
  //    i += 1;
  //  );
  //?>
  <?
    loop(i=1;npartials,
      printf("f%02d.modal_init_ratio(freq, %d, marimba[%d], 0);\n", i, i, i-1);
      i += 1;
    );
  ?>
);

function off_note(p)
local(ptr, note, pp, freq)
(
  note = p[2];
  ptr = poly.array_find(note);

  //<?
  //  loop(i=1;npartials,
  //    printf("f%02d.modal_init(GLOBAL_FREQ, %d, 1);\n", i, i);
  //    i += 1;
  //  );
  //?>
  <?
    loop(i=1;npartials,
      printf("f%02d.modal_init_ratio(GLOBAL_FREQ, %d, marimba[%d], 1);\n", i, i, i-1);
      i += 1;
    );
  ?>
);

function handle_midi(p)
local(msg1, vel, event)
(
  msg1 = p[1];
  vel = p[3];
  event = msg1 & 0xF0;
  event == 0x90 && vel ? on_note(p); // Note on
  event == 0x80 || (event == 0x90 && !vel) ? off_note(p); // Note off
);

/**
  Sample pos linear interpolation
*/
function wave_lerp(buf, pos)
local(x, i, j)
(
  i = pos|0;
  x = pos - i;
  j = i + 1;
  j >= wavelen ? j = 0;
  (1 - x) * buf[i] + x * buf[j];
);

// process queued midi
ptr = midi.array_first();
while(ptr >= 0) (
  ptr[0] == 0 ? ( // offset has reached zero
    handle_midi(ptr);
  );
  ptr[0] -= 1;
  ptr = midi.array_next(ptr);
);

// process notes being played
outl = 0;
outr = 0;
ptr = poly.array_first();
while(ptr >= 0) ( // for each note/voice
  outl = wave_lerp(clickl, ptr[3]) * gain;
  outr = wave_lerp(clickr, ptr[3]) * gain;
  ptr[3] += click_ktrack // samplepos += playback_speed
    ? ptr[4] * playback_speed
    : playback_speed;
  ptr[3] > wavelen ? ptr[3] = -1;
  ptr = poly.array_next(ptr);
);

outc = (outl + outr) / 2;
out_res = 0;

<?
  loop(i=1;npartials,
    printf("out_res += f%02d.modal_process(outc);\n", i);
    i += 1;
  );
?>

spl0 += out_res;
spl1 = spl0;

// remove notes that finish playing
ptr = poly.array_first();
while (ptr >= 0) (
  ptr[3] == -1 ? (
    poly.array_remove(ptr);
    ptr = poly.array_first();
  ) : (
    ptr = poly.array_next(ptr);
  );
);






